// This file was generated by gir (adc662d) from gir-files (11e0e6d)
// DO NOT EDIT

use CellRenderer;
use CellRendererText;
use ffi;
use ffi::GtkCellRendererAccel;
use glib::object::Downcast;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi::gpointer;
use libc::c_char;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct CellRendererAccel(Object<ffi::GtkCellRendererAccel>): CellRendererText, CellRenderer;

    match fn {
        get_type => || ffi::gtk_cell_renderer_accel_get_type(),
    }
}

impl CellRendererAccel {
    pub fn new() -> CellRendererAccel {
        assert_initialized_main_thread!();
        unsafe {
            CellRenderer::from_glib_none(ffi::gtk_cell_renderer_accel_new()).downcast_unchecked()
        }
    }

    pub fn connect_accel_cleared<F: Fn(&CellRendererAccel, &str) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&CellRendererAccel, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "accel-cleared",
                transmute(accel_cleared_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn accel_cleared_trampoline(this: *mut GtkCellRendererAccel, path_string: *mut c_char, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&CellRendererAccel, &str) + 'static> = transmute(f);
    f(&from_glib_none(this), &String::from_glib_none(path_string))
}
