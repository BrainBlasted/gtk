// This file was generated by gir (4d68d19) from gir-files (11e0e6d)
// DO NOT EDIT

use TextIter;
use ffi;
use gdk;
use gdk_ffi;
use glib;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use signal::Inhibit;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct TextTag(Object<ffi::GtkTextTag>);

    match fn {
        get_type => || ffi::gtk_text_tag_get_type(),
    }
}

impl TextTag {
    pub fn new(name: Option<&str>) -> TextTag {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_text_tag_new(name.to_glib_none().0))
        }
    }

    pub fn event<T: IsA<glib::Object>>(&self, event_object: &T, event: &gdk::Event, iter: &TextIter) -> bool {
        unsafe {
            from_glib(ffi::gtk_text_tag_event(self.to_glib_none().0, event_object.to_glib_none().0, mut_override(event.to_glib_none().0), iter.to_glib_none().0))
        }
    }

    pub fn get_priority(&self) -> i32 {
        unsafe {
            ffi::gtk_text_tag_get_priority(self.to_glib_none().0)
        }
    }

    pub fn set_priority(&self, priority: i32) {
        unsafe {
            ffi::gtk_text_tag_set_priority(self.to_glib_none().0, priority);
        }
    }

    pub fn connect_event<F: Fn(&TextTag, &glib::Object, &gdk::Event, &TextIter) -> Inhibit + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&TextTag, &glib::Object, &gdk::Event, &TextIter) -> Inhibit + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "event",
                transmute(event_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn event_trampoline(this: *mut ffi::GtkTextTag, object: *mut gobject_ffi::GObject, event: *mut gdk_ffi::GdkEvent, iter: *mut ffi::GtkTextIter, f: glib_ffi::gpointer) -> glib_ffi::gboolean {
    callback_guard!();
    let f: &Box_<Fn(&TextTag, &glib::Object, &gdk::Event, &TextIter) -> Inhibit + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(object), &from_glib_none(event), &from_glib_none(iter)).to_glib()
}
