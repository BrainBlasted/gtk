// This file was generated by gir (baa441b) from gir-files (11e0e6d)
// DO NOT EDIT

use EventController;
#[cfg(gtk_3_14)]
use EventSequenceState;
#[cfg(gtk_3_14)]
use Rectangle;
use ffi;
#[cfg(gtk_3_14)]
use gdk;
use glib::object::IsA;
use glib::translate::*;
#[cfg(gtk_3_14)]
use std::mem;

glib_wrapper! {
    pub struct Gesture(Object<ffi::GtkGesture>): EventController;

    match fn {
        get_type => || ffi::gtk_gesture_get_type(),
    }
}

pub trait GestureExt {
    #[cfg(gtk_3_14)]
    fn get_bounding_box(&self) -> Option<Rectangle>;

    #[cfg(gtk_3_14)]
    fn get_bounding_box_center(&self) -> Option<(f64, f64)>;

    //#[cfg(gtk_3_14)]
    //fn get_device(&self) -> /*Ignored*/Option<gdk::Device>;

    #[cfg(gtk_3_14)]
    fn get_group(&self) -> Vec<Gesture>;

    //fn get_last_event(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> /*Unknown conversion*/Unknown rust type: "Event";

    //#[cfg(gtk_3_14)]
    //fn get_last_updated_sequence(&self) -> /*Ignored*/gdk::EventSequence;

    //#[cfg(gtk_3_14)]
    //fn get_point(&self, sequence: /*Ignored*/Option<&mut gdk::EventSequence>) -> Option<(f64, f64)>;

    //#[cfg(gtk_3_14)]
    //fn get_sequence_state(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> EventSequenceState;

    //#[cfg(gtk_3_14)]
    //fn get_sequences(&self) -> Vec<gdk::EventSequence>;

    #[cfg(gtk_3_14)]
    fn get_window(&self) -> Option<gdk::Window>;

    #[cfg(gtk_3_14)]
    fn group<T: IsA<Gesture>>(&self, gesture: &T);

    //#[cfg(gtk_3_14)]
    //fn handles_sequence(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> bool;

    #[cfg(gtk_3_14)]
    fn is_active(&self) -> bool;

    #[cfg(gtk_3_14)]
    fn is_grouped_with<T: IsA<Gesture>>(&self, other: &T) -> bool;

    #[cfg(gtk_3_14)]
    fn is_recognized(&self) -> bool;

    //#[cfg(gtk_3_14)]
    //fn set_sequence_state(&self, sequence: /*Ignored*/&mut gdk::EventSequence, state: EventSequenceState) -> bool;

    #[cfg(gtk_3_14)]
    fn set_state(&self, state: EventSequenceState) -> bool;

    #[cfg(gtk_3_14)]
    fn set_window(&self, window: Option<&gdk::Window>);

    #[cfg(gtk_3_14)]
    fn ungroup(&self);
}

impl<O: IsA<Gesture>> GestureExt for O {
    #[cfg(gtk_3_14)]
    fn get_bounding_box(&self) -> Option<Rectangle> {
        unsafe {
            let mut rect = Rectangle::uninitialized();
            let ret = from_glib(ffi::gtk_gesture_get_bounding_box(self.to_glib_none().0, rect.to_glib_none_mut().0));
            if ret { Some(rect) } else { None }
        }
    }

    #[cfg(gtk_3_14)]
    fn get_bounding_box_center(&self) -> Option<(f64, f64)> {
        unsafe {
            let mut x = mem::uninitialized();
            let mut y = mem::uninitialized();
            let ret = from_glib(ffi::gtk_gesture_get_bounding_box_center(self.to_glib_none().0, &mut x, &mut y));
            if ret { Some((x, y)) } else { None }
        }
    }

    //#[cfg(gtk_3_14)]
    //fn get_device(&self) -> /*Ignored*/Option<gdk::Device> {
    //    unsafe { TODO: call ffi::gtk_gesture_get_device() }
    //}

    #[cfg(gtk_3_14)]
    fn get_group(&self) -> Vec<Gesture> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gtk_gesture_get_group(self.to_glib_none().0))
        }
    }

    //fn get_last_event(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> /*Unknown conversion*/Unknown rust type: "Event" {
    //    unsafe { TODO: call ffi::gtk_gesture_get_last_event() }
    //}

    //#[cfg(gtk_3_14)]
    //fn get_last_updated_sequence(&self) -> /*Ignored*/gdk::EventSequence {
    //    unsafe { TODO: call ffi::gtk_gesture_get_last_updated_sequence() }
    //}

    //#[cfg(gtk_3_14)]
    //fn get_point(&self, sequence: /*Ignored*/Option<&mut gdk::EventSequence>) -> Option<(f64, f64)> {
    //    unsafe { TODO: call ffi::gtk_gesture_get_point() }
    //}

    //#[cfg(gtk_3_14)]
    //fn get_sequence_state(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> EventSequenceState {
    //    unsafe { TODO: call ffi::gtk_gesture_get_sequence_state() }
    //}

    //#[cfg(gtk_3_14)]
    //fn get_sequences(&self) -> Vec<gdk::EventSequence> {
    //    unsafe { TODO: call ffi::gtk_gesture_get_sequences() }
    //}

    #[cfg(gtk_3_14)]
    fn get_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_gesture_get_window(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_14)]
    fn group<T: IsA<Gesture>>(&self, gesture: &T) {
        unsafe {
            ffi::gtk_gesture_group(self.to_glib_none().0, gesture.to_glib_none().0);
        }
    }

    //#[cfg(gtk_3_14)]
    //fn handles_sequence(&self, sequence: /*Ignored*/&mut gdk::EventSequence) -> bool {
    //    unsafe { TODO: call ffi::gtk_gesture_handles_sequence() }
    //}

    #[cfg(gtk_3_14)]
    fn is_active(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_gesture_is_active(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_14)]
    fn is_grouped_with<T: IsA<Gesture>>(&self, other: &T) -> bool {
        unsafe {
            from_glib(ffi::gtk_gesture_is_grouped_with(self.to_glib_none().0, other.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_14)]
    fn is_recognized(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_gesture_is_recognized(self.to_glib_none().0))
        }
    }

    //#[cfg(gtk_3_14)]
    //fn set_sequence_state(&self, sequence: /*Ignored*/&mut gdk::EventSequence, state: EventSequenceState) -> bool {
    //    unsafe { TODO: call ffi::gtk_gesture_set_sequence_state() }
    //}

    #[cfg(gtk_3_14)]
    fn set_state(&self, state: EventSequenceState) -> bool {
        unsafe {
            from_glib(ffi::gtk_gesture_set_state(self.to_glib_none().0, state))
        }
    }

    #[cfg(gtk_3_14)]
    fn set_window(&self, window: Option<&gdk::Window>) {
        unsafe {
            ffi::gtk_gesture_set_window(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    #[cfg(gtk_3_14)]
    fn ungroup(&self) {
        unsafe {
            ffi::gtk_gesture_ungroup(self.to_glib_none().0);
        }
    }
}
