// This file was generated by gir (8cacc34) from gir-files (11e0e6d)
// DO NOT EDIT

use Object;
use Widget;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct CellEditable(Object<ffi::GtkCellEditable>): Widget;

    match fn {
        get_type => || ffi::gtk_cell_editable_get_type(),
    }
}

pub trait CellEditableExt {
    fn editing_done(&self);

    fn remove_widget(&self);

    //fn start_editing(&self, event: /*Unknown conversion*//*Unimplemented*/Event);

    fn connect_editing_done<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_remove_widget<F: Fn(&Self) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<CellEditable> + IsA<Object>> CellEditableExt for O {
    fn editing_done(&self) {
        unsafe {
            ffi::gtk_cell_editable_editing_done(self.to_glib_none().0);
        }
    }

    fn remove_widget(&self) {
        unsafe {
            ffi::gtk_cell_editable_remove_widget(self.to_glib_none().0);
        }
    }

    //fn start_editing(&self, event: /*Unknown conversion*//*Unimplemented*/Event) {
    //    unsafe { TODO: call ffi::gtk_cell_editable_start_editing() }
    //}

    fn connect_editing_done<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "editing-done",
                transmute(editing_done_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_remove_widget<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "remove-widget",
                transmute(remove_widget_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn editing_done_trampoline<T>(this: *mut ffi::GtkCellEditable, f: glib_ffi::gpointer)
where T: IsA<CellEditable> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&CellEditable::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn remove_widget_trampoline<T>(this: *mut ffi::GtkCellEditable, f: glib_ffi::gpointer)
where T: IsA<CellEditable> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&CellEditable::from_glib_none(this).downcast_unchecked())
}
