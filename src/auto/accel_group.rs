// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;

pub type AccelGroup = Object<ffi::GtkAccelGroup>;


impl AccelGroup {
    pub fn new() -> AccelGroup {
        unsafe {
            from_glib_full(ffi::gtk_accel_group_new())
        }
    }

    //pub fn activate<T: Upcast<gobject::Object>>(&self, accel_quark: /*Unknown kind*/Unknown rust type: "Quark", acceleratable: &T, accel_key: u32, accel_mods: gdk::ModifierType) -> bool {
    //    unsafe { TODO: call ffi:gtk_accel_group_activate() }
    //}

    //pub fn connect(&self, accel_key: u32, accel_mods: gdk::ModifierType, accel_flags: AccelFlags, closure: /*Unknown kind*/Unknown rust type: "Closure") {
    //    unsafe { TODO: call ffi:gtk_accel_group_connect() }
    //}

    //pub fn connect_by_path(&self, accel_path: &str, closure: /*Unknown kind*/Unknown rust type: "Closure") {
    //    unsafe { TODO: call ffi:gtk_accel_group_connect_by_path() }
    //}

    //pub fn disconnect(&self, closure: /*Unknown kind*/Unknown rust type: "Closure") -> bool {
    //    unsafe { TODO: call ffi:gtk_accel_group_disconnect() }
    //}

    //pub fn disconnect_key(&self, accel_key: u32, accel_mods: gdk::ModifierType) -> bool {
    //    unsafe { TODO: call ffi:gtk_accel_group_disconnect_key() }
    //}

    //pub fn find(&self, find_func: /*Unknown kind*/Unknown rust type: "AccelGroupFindFunc", data: Fundamental: Pointer) -> /*Unknown kind*/Unknown rust type: "AccelKey" {
    //    unsafe { TODO: call ffi:gtk_accel_group_find() }
    //}

    pub fn get_is_locked(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_accel_group_get_is_locked(self.to_glib_none().0))
        }
    }

    //pub fn get_modifier_mask(&self) -> gdk::ModifierType {
    //    unsafe { TODO: call ffi:gtk_accel_group_get_modifier_mask() }
    //}

    pub fn lock(&self) {
        unsafe {
            ffi::gtk_accel_group_lock(self.to_glib_none().0);
        }
    }

    //pub fn query(&self, accel_key: u32, accel_mods: gdk::ModifierType, n_entries: &mut u32) -> /*Unknown kind*/Unknown rust type: "CArray TypeId { ns_id: 1, id: 14 }" {
    //    unsafe { TODO: call ffi:gtk_accel_group_query() }
    //}

    pub fn unlock(&self) {
        unsafe {
            ffi::gtk_accel_group_unlock(self.to_glib_none().0);
        }
    }

    //pub fn from_accel_closure(closure: /*Unknown kind*/Unknown rust type: "Closure") -> Option<AccelGroup> {
    //    unsafe { TODO: call ffi:gtk_accel_group_from_accel_closure() }
    //}

}

impl types::StaticType for AccelGroup {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_accel_group_get_type()) }
    }
}
