// This file was generated by gir (b798f4f) from gir-files (11e0e6d)
// DO NOT EDIT

use Actionable;
use Adjustment;
use Bin;
use Button;
use Container;
use Object;
use Orientable;
use Widget;
use ffi;
use ffi::GtkScaleButton;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi::gpointer;
use libc::c_double;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct ScaleButton(Object<ffi::GtkScaleButton>): Button, Bin, Container, Widget, Actionable, Orientable;

    match fn {
        get_type => || ffi::gtk_scale_button_get_type(),
    }
}

impl ScaleButton {
    pub fn new(size: i32, min: f64, max: f64, step: f64, icons: &[&str]) -> ScaleButton {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_scale_button_new(size, min, max, step, icons.to_glib_none().0)).downcast_unchecked()
        }
    }
}

pub trait ScaleButtonExt {
    fn get_adjustment(&self) -> Adjustment;

    fn get_minus_button(&self) -> Option<Widget>;

    fn get_plus_button(&self) -> Option<Widget>;

    fn get_popup(&self) -> Option<Widget>;

    fn get_value(&self) -> f64;

    fn set_adjustment(&self, adjustment: &Adjustment);

    fn set_icons(&self, icons: &[&str]);

    fn set_value(&self, value: f64);

    fn connect_popdown<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_popup<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    fn connect_value_changed<F: Fn(&Self, f64) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<ScaleButton> + IsA<Object>> ScaleButtonExt for O {
    fn get_adjustment(&self) -> Adjustment {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_adjustment(self.to_glib_none().0))
        }
    }

    fn get_minus_button(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_minus_button(self.to_glib_none().0))
        }
    }

    fn get_plus_button(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_plus_button(self.to_glib_none().0))
        }
    }

    fn get_popup(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_popup(self.to_glib_none().0))
        }
    }

    fn get_value(&self) -> f64 {
        unsafe {
            ffi::gtk_scale_button_get_value(self.to_glib_none().0)
        }
    }

    fn set_adjustment(&self, adjustment: &Adjustment) {
        unsafe {
            ffi::gtk_scale_button_set_adjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

    fn set_icons(&self, icons: &[&str]) {
        unsafe {
            ffi::gtk_scale_button_set_icons(self.to_glib_none().0, icons.to_glib_none().0);
        }
    }

    fn set_value(&self, value: f64) {
        unsafe {
            ffi::gtk_scale_button_set_value(self.to_glib_none().0, value);
        }
    }

    fn connect_popdown<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "popdown",
                transmute(popdown_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_popup<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "popup",
                transmute(popup_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    fn connect_value_changed<F: Fn(&Self, f64) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, f64) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "value-changed",
                transmute(value_changed_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn popdown_trampoline<T>(this: *mut GtkScaleButton, f: gpointer)
where T: IsA<ScaleButton> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&ScaleButton::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn popup_trampoline<T>(this: *mut GtkScaleButton, f: gpointer)
where T: IsA<ScaleButton> {
    callback_guard!();
    let f: &Box_<Fn(&T) + 'static> = transmute(f);
    f(&ScaleButton::from_glib_none(this).downcast_unchecked())
}

unsafe extern "C" fn value_changed_trampoline<T>(this: *mut GtkScaleButton, value: c_double, f: gpointer)
where T: IsA<ScaleButton> {
    callback_guard!();
    let f: &Box_<Fn(&T, f64) + 'static> = transmute(f);
    f(&ScaleButton::from_glib_none(this).downcast_unchecked(), value)
}
