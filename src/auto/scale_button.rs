// This file was generated by gir (e0b4c3b) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Actionable;
use Adjustment;
use Bin;
use Buildable;
use Button;
use Container;
use Orientable;
use Widget;

pub type ScaleButton = Object<ffi::GtkScaleButton>;

unsafe impl Upcast<Widget> for ScaleButton { }
unsafe impl Upcast<Container> for ScaleButton { }
unsafe impl Upcast<Bin> for ScaleButton { }
unsafe impl Upcast<Button> for ScaleButton { }
unsafe impl Upcast<Actionable> for ScaleButton { }
unsafe impl Upcast<Buildable> for ScaleButton { }
unsafe impl Upcast<Orientable> for ScaleButton { }

impl ScaleButton {
    //pub fn new(size: i32, min: f64, max: f64, step: f64, icons: /*Unknown kind*/Unknown rust type: "CArray TypeId { ns_id: 0, id: 28 }") -> ScaleButton {
    //    unsafe { TODO: call ffi:gtk_scale_button_new() }
    //}

    pub fn get_adjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_adjustment(self.to_glib_none().0))
        }
    }

    pub fn get_minus_button(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_minus_button(self.to_glib_none().0))
        }
    }

    pub fn get_plus_button(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_plus_button(self.to_glib_none().0))
        }
    }

    pub fn get_popup(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_scale_button_get_popup(self.to_glib_none().0))
        }
    }

    pub fn get_value(&self) -> f64 {
        unsafe {
            ffi::gtk_scale_button_get_value(self.to_glib_none().0)
        }
    }

    pub fn set_adjustment(&self, adjustment: &Adjustment) {
        unsafe {
            ffi::gtk_scale_button_set_adjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

    //pub fn set_icons(&self, icons: /*Unknown kind*/Unknown rust type: "CArray TypeId { ns_id: 0, id: 28 }") {
    //    unsafe { TODO: call ffi:gtk_scale_button_set_icons() }
    //}

    pub fn set_value(&self, value: f64) {
        unsafe {
            ffi::gtk_scale_button_set_value(self.to_glib_none().0, value);
        }
    }

}

impl types::StaticType for ScaleButton {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_scale_button_get_type()) }
    }
}
