// This file was generated by gir (e48471c) from gir-files (71d73f0)
// DO NOT EDIT

use CellRenderer;
use Object;
use TreePath;
use ffi;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use libc;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct CellRendererText(Object<ffi::GtkCellRendererText>): CellRenderer;

    match fn {
        get_type => || ffi::gtk_cell_renderer_text_get_type(),
    }
}

impl CellRendererText {
    pub fn new() -> CellRendererText {
        assert_initialized_main_thread!();
        unsafe {
            CellRenderer::from_glib_none(ffi::gtk_cell_renderer_text_new()).downcast_unchecked()
        }
    }
}

pub trait CellRendererTextExt {
    fn set_fixed_height_from_font(&self, number_of_rows: i32);

    fn connect_edited<F: Fn(&Self, TreePath, &str) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<CellRendererText> + IsA<Object>> CellRendererTextExt for O {
    fn set_fixed_height_from_font(&self, number_of_rows: i32) {
        unsafe {
            ffi::gtk_cell_renderer_text_set_fixed_height_from_font(self.to_glib_none().0, number_of_rows);
        }
    }

    fn connect_edited<F: Fn(&Self, TreePath, &str) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, TreePath, &str) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "edited",
                transmute(edited_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn edited_trampoline<T>(this: *mut ffi::GtkCellRendererText, path: *mut libc::c_char, new_text: *mut libc::c_char, f: glib_ffi::gpointer)
where T: IsA<CellRendererText> {
    callback_guard!();
    let f: &Box_<Fn(&T, TreePath, &str) + 'static> = transmute(f);
    let path = from_glib_full(ffi::gtk_tree_path_new_from_string(path));
    f(&CellRendererText::from_glib_none(this).downcast_unchecked(), path, &String::from_glib_none(new_text))
}
