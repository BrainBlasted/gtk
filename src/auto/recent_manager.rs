// This file was generated by gir (4cd15d1) from gir-files (11e0e6d)
// DO NOT EDIT

use RecentData;
use RecentInfo;
use ffi;
use glib::translate::*;

glib_wrapper! {
    pub struct RecentManager(Object<ffi::GtkRecentManager>);

    match fn {
        get_type => || ffi::gtk_recent_manager_get_type(),
    }
}

impl RecentManager {
    pub fn new() -> RecentManager {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_recent_manager_new())
        }
    }

    pub fn add_full(&self, uri: &str, recent_data: &RecentData) -> bool {
        unsafe {
            from_glib(ffi::gtk_recent_manager_add_full(self.to_glib_none().0, uri.to_glib_none().0, recent_data.to_glib_none().0))
        }
    }

    pub fn add_item(&self, uri: &str) -> bool {
        unsafe {
            from_glib(ffi::gtk_recent_manager_add_item(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    pub fn get_items(&self) -> Vec<RecentInfo> {
        unsafe {
            FromGlibPtrContainer::from_glib_full(ffi::gtk_recent_manager_get_items(self.to_glib_none().0))
        }
    }

    pub fn has_item(&self, uri: &str) -> bool {
        unsafe {
            from_glib(ffi::gtk_recent_manager_has_item(self.to_glib_none().0, uri.to_glib_none().0))
        }
    }

    //pub fn lookup_item(&self, uri: &str, error: /*Ignored*/Option<glib::Error>) -> RecentInfo {
    //    unsafe { TODO: call ffi::gtk_recent_manager_lookup_item() }
    //}

    //pub fn move_item(&self, uri: &str, new_uri: Option<&str>, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi::gtk_recent_manager_move_item() }
    //}

    //pub fn purge_items(&self, error: /*Ignored*/Option<glib::Error>) -> i32 {
    //    unsafe { TODO: call ffi::gtk_recent_manager_purge_items() }
    //}

    //pub fn remove_item(&self, uri: &str, error: /*Ignored*/Option<glib::Error>) -> bool {
    //    unsafe { TODO: call ffi::gtk_recent_manager_remove_item() }
    //}

    pub fn get_default() -> Option<RecentManager> {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_none(ffi::gtk_recent_manager_get_default())
        }
    }

}
