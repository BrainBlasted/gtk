// This file was generated by gir (e0b4c3b) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Actionable;
use Bin;
use Buildable;
use Container;
use Menu;
use Widget;

pub type MenuItem = Object<ffi::GtkMenuItem>;

unsafe impl Upcast<Widget> for MenuItem { }
unsafe impl Upcast<Container> for MenuItem { }
unsafe impl Upcast<Bin> for MenuItem { }
unsafe impl Upcast<Actionable> for MenuItem { }
unsafe impl Upcast<Buildable> for MenuItem { }

impl MenuItem {
    pub fn new() -> MenuItem {
        unsafe {
            Widget::from_glib_none(ffi::gtk_menu_item_new()).downcast_unchecked()
        }
    }

    pub fn new_with_label(label: &str) -> MenuItem {
        unsafe {
            Widget::from_glib_none(ffi::gtk_menu_item_new_with_label(label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_mnemonic(label: &str) -> MenuItem {
        unsafe {
            Widget::from_glib_none(ffi::gtk_menu_item_new_with_mnemonic(label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn activate(&self) {
        unsafe {
            ffi::gtk_menu_item_activate(self.to_glib_none().0);
        }
    }

    pub fn deselect(&self) {
        unsafe {
            ffi::gtk_menu_item_deselect(self.to_glib_none().0);
        }
    }

    pub fn get_accel_path(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_menu_item_get_accel_path(self.to_glib_none().0))
        }
    }

    pub fn get_label(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_menu_item_get_label(self.to_glib_none().0))
        }
    }

    pub fn get_reserve_indicator(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_menu_item_get_reserve_indicator(self.to_glib_none().0))
        }
    }

    pub fn get_right_justified(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_menu_item_get_right_justified(self.to_glib_none().0))
        }
    }

    pub fn get_submenu(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_menu_item_get_submenu(self.to_glib_none().0))
        }
    }

    pub fn get_use_underline(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_menu_item_get_use_underline(self.to_glib_none().0))
        }
    }

    pub fn select(&self) {
        unsafe {
            ffi::gtk_menu_item_select(self.to_glib_none().0);
        }
    }

    pub fn set_accel_path(&self, accel_path: Option<&str>) {
        unsafe {
            ffi::gtk_menu_item_set_accel_path(self.to_glib_none().0, accel_path.to_glib_none().0);
        }
    }

    pub fn set_label(&self, label: &str) {
        unsafe {
            ffi::gtk_menu_item_set_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    pub fn set_reserve_indicator(&self, reserve: bool) {
        unsafe {
            ffi::gtk_menu_item_set_reserve_indicator(self.to_glib_none().0, reserve.to_glib());
        }
    }

    pub fn set_right_justified(&self, right_justified: bool) {
        unsafe {
            ffi::gtk_menu_item_set_right_justified(self.to_glib_none().0, right_justified.to_glib());
        }
    }

    pub fn set_submenu<T: Upcast<Menu>>(&self, submenu: Option<&T>) {
        unsafe {
            ffi::gtk_menu_item_set_submenu(self.to_glib_none().0, submenu.map(Upcast::upcast).to_glib_none().0);
        }
    }

    pub fn set_use_underline(&self, setting: bool) {
        unsafe {
            ffi::gtk_menu_item_set_use_underline(self.to_glib_none().0, setting.to_glib());
        }
    }

    pub fn toggle_size_allocate(&self, allocation: i32) {
        unsafe {
            ffi::gtk_menu_item_toggle_size_allocate(self.to_glib_none().0, allocation);
        }
    }

    pub fn toggle_size_request(&self, requisition: &mut i32) {
        unsafe {
            ffi::gtk_menu_item_toggle_size_request(self.to_glib_none().0, requisition);
        }
    }

}

impl types::StaticType for MenuItem {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_menu_item_get_type()) }
    }
}
