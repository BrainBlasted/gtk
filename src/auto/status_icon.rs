// This file was generated by gir (b798f4f) from gir-files (11e0e6d)
// DO NOT EDIT

use ffi;
use ffi::GtkStatusIcon;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi::gboolean;
use glib_ffi::gpointer;
use libc::c_int;
use libc::c_uint;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct StatusIcon(Object<ffi::GtkStatusIcon>);

    match fn {
        get_type => || ffi::gtk_status_icon_get_type(),
    }
}

impl StatusIcon {
    pub fn connect_activate<F: Fn(&StatusIcon) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&StatusIcon) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "activate",
                transmute(activate_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //pub fn connect_button_press_event<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    TODO: connect to trampoline
    //}

    //pub fn connect_button_release_event<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    TODO: connect to trampoline
    //}

    pub fn connect_popup_menu<F: Fn(&StatusIcon, u32, u32) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&StatusIcon, u32, u32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "popup-menu",
                transmute(popup_menu_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    //pub fn connect_query_tooltip<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    TODO: connect to trampoline
    //}

    //pub fn connect_scroll_event<Unsupported or ignored types>(&self, f: F) -> u64 {
    //    TODO: connect to trampoline
    //}

    pub fn connect_size_changed<F: Fn(&StatusIcon, i32) -> bool + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&StatusIcon, i32) -> bool + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "size-changed",
                transmute(size_changed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn activate_trampoline(this: *mut GtkStatusIcon, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&StatusIcon) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn popup_menu_trampoline(this: *mut GtkStatusIcon, button: c_uint, activate_time: c_uint, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&StatusIcon, u32, u32) + 'static> = transmute(f);
    f(&from_glib_none(this), button, activate_time)
}

unsafe extern "C" fn size_changed_trampoline(this: *mut GtkStatusIcon, size: c_int, f: gpointer) -> gboolean {
    callback_guard!();
    let f: &Box_<Fn(&StatusIcon, i32) -> bool + 'static> = transmute(f);
    f(&from_glib_none(this), size).to_glib()
}
