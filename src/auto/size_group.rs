// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Buildable;
use SizeGroupMode;
use Widget;

pub type SizeGroup = Object<ffi::GtkSizeGroup>;

unsafe impl Upcast<Buildable> for SizeGroup { }

impl SizeGroup {
    pub fn new(mode: SizeGroupMode) -> SizeGroup {
        unsafe {
            from_glib_full(ffi::gtk_size_group_new(mode))
        }
    }

    pub fn add_widget<T: Upcast<Widget>>(&self, widget: &T) {
        unsafe {
            ffi::gtk_size_group_add_widget(self.to_glib_none().0, widget.upcast().to_glib_none().0);
        }
    }

    pub fn get_ignore_hidden(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_size_group_get_ignore_hidden(self.to_glib_none().0))
        }
    }

    pub fn get_mode(&self) -> SizeGroupMode {
        unsafe {
            ffi::gtk_size_group_get_mode(self.to_glib_none().0)
        }
    }

    //pub fn get_widgets(&self) -> /*Unknown kind*/Unknown rust type: "SList TypeId { ns_id: 1, id: 3 }" {
    //    unsafe { TODO: call ffi:gtk_size_group_get_widgets() }
    //}

    pub fn remove_widget<T: Upcast<Widget>>(&self, widget: &T) {
        unsafe {
            ffi::gtk_size_group_remove_widget(self.to_glib_none().0, widget.upcast().to_glib_none().0);
        }
    }

    pub fn set_ignore_hidden(&self, ignore_hidden: bool) {
        unsafe {
            ffi::gtk_size_group_set_ignore_hidden(self.to_glib_none().0, ignore_hidden.to_glib());
        }
    }

    pub fn set_mode(&self, mode: SizeGroupMode) {
        unsafe {
            ffi::gtk_size_group_set_mode(self.to_glib_none().0, mode);
        }
    }

}

impl types::StaticType for SizeGroup {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_size_group_get_type()) }
    }
}
