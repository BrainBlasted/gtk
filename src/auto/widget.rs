// This file was generated by gir (c9185c9) from gir-files (11e0e6d)
// DO NOT EDIT

use AccelFlags;
use AccelGroup;
use Align;
use Allocation;
use Buildable;
use DirectionType;
use Orientation;
use Requisition;
use SizeRequestMode;
use StateFlags;
use StateType;
use StyleContext;
use TextDirection;
use Window;
use ffi;
use gdk;
use gdk_pixbuf;
use glib;
use glib::object::IsA;
use glib::translate::*;
use std::mem;

glib_wrapper! {
    pub struct Widget(Object<ffi::GtkWidget>): Buildable;

    match fn {
        get_type => || ffi::gtk_widget_get_type(),
    }
}

impl Widget {
    //pub fn new(type_: glib::types::Type, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) -> Widget {
    //    unsafe { TODO: call ffi::gtk_widget_new() }
    //}

    pub fn get_default_direction() -> TextDirection {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gtk_widget_get_default_direction()
        }
    }

    //pub fn get_default_style() -> /*Ignored*/Option<Style> {
    //    unsafe { TODO: call ffi::gtk_widget_get_default_style() }
    //}

    pub fn pop_composite_child() {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gtk_widget_pop_composite_child();
        }
    }

    pub fn push_composite_child() {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gtk_widget_push_composite_child();
        }
    }

    pub fn set_default_direction(dir: TextDirection) {
        assert_initialized_main_thread!();
        unsafe {
            ffi::gtk_widget_set_default_direction(dir);
        }
    }
}

pub trait WidgetExt {
    fn activate(&self) -> bool;

    fn add_accelerator(&self, accel_signal: &str, accel_group: &AccelGroup, accel_key: u32, accel_mods: gdk::ModifierType, accel_flags: AccelFlags);

    //fn add_device_events(&self, device: /*Ignored*/&gdk::Device, events: /*Ignored*/gdk::EventMask);

    fn add_events(&self, events: i32);

    fn add_mnemonic_label<T: IsA<Widget>>(&self, label: &T);

    //#[cfg(gtk_3_8)]
    //fn add_tick_callback(&self, callback: /*Unknown conversion*//*Unimplemented*/TickCallback, user_data: /*Unimplemented*/Fundamental: Pointer, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32;

    fn can_activate_accel(&self, signal_id: u32) -> bool;

    fn child_focus(&self, direction: DirectionType) -> bool;

    fn child_notify(&self, child_property: &str);

    //fn class_path(&self, path: /*Unimplemented*/String, path_reversed: /*Unimplemented*/String) -> u32;

    fn compute_expand(&self, orientation: Orientation) -> bool;

    //fn create_pango_context(&self) -> /*Ignored*/Option<pango::Context>;

    //fn create_pango_layout(&self, text: Option<&str>) -> /*Ignored*/Option<pango::Layout>;

    fn destroy(&self);

    //fn destroyed<T: IsA<Widget>>(&self, widget_pointer: &T);

    //fn device_is_shadowed(&self, device: /*Ignored*/&gdk::Device) -> bool;

    //fn drag_begin(&self, targets: /*Ignored*/&TargetList, actions: /*Ignored*/gdk::DragAction, button: i32, event: /*Unknown conversion*//*Unimplemented*/Event) -> /*Ignored*/Option<gdk::DragContext>;

    //#[cfg(gtk_3_10)]
    //fn drag_begin_with_coordinates(&self, targets: /*Ignored*/&TargetList, actions: /*Ignored*/gdk::DragAction, button: i32, event: /*Unknown conversion*//*Unimplemented*/Event, x: i32, y: i32) -> /*Ignored*/Option<gdk::DragContext>;

    fn drag_check_threshold(&self, start_x: i32, start_y: i32, current_x: i32, current_y: i32) -> bool;

    fn drag_dest_add_image_targets(&self);

    fn drag_dest_add_text_targets(&self);

    fn drag_dest_add_uri_targets(&self);

    //fn drag_dest_find_target(&self, context: /*Ignored*/&gdk::DragContext, target_list: /*Ignored*/Option<&TargetList>) -> /*Ignored*/gdk::Atom;

    //fn drag_dest_get_target_list(&self) -> /*Ignored*/TargetList;

    fn drag_dest_get_track_motion(&self) -> bool;

    //fn drag_dest_set(&self, flags: DestDefaults, targets: /*Ignored*/&[&TargetEntry], n_targets: i32, actions: /*Ignored*/gdk::DragAction);

    //fn drag_dest_set_proxy(&self, proxy_window: &gdk::Window, protocol: /*Ignored*/gdk::DragProtocol, use_coordinates: bool);

    //fn drag_dest_set_target_list(&self, target_list: /*Ignored*/Option<&TargetList>);

    fn drag_dest_set_track_motion(&self, track_motion: bool);

    fn drag_dest_unset(&self);

    //fn drag_get_data(&self, context: /*Ignored*/&gdk::DragContext, target: /*Ignored*/&gdk::Atom, time_: u32);

    fn drag_highlight(&self);

    fn drag_source_add_image_targets(&self);

    fn drag_source_add_text_targets(&self);

    fn drag_source_add_uri_targets(&self);

    //fn drag_source_get_target_list(&self) -> /*Ignored*/TargetList;

    //fn drag_source_set(&self, start_button_mask: gdk::ModifierType, targets: /*Ignored*/&[&TargetEntry], n_targets: i32, actions: /*Ignored*/gdk::DragAction);

    //fn drag_source_set_icon_gicon<T: IsA</*Ignored*/gio::Icon>>(&self, icon: &T);

    fn drag_source_set_icon_name(&self, icon_name: &str);

    fn drag_source_set_icon_pixbuf(&self, pixbuf: &gdk_pixbuf::Pixbuf);

    fn drag_source_set_icon_stock(&self, stock_id: &str);

    //fn drag_source_set_target_list(&self, target_list: /*Ignored*/Option<&TargetList>);

    fn drag_source_unset(&self);

    fn drag_unhighlight(&self);

    //fn draw(&self, cr: /*Ignored*/&mut cairo::Context);

    fn ensure_style(&self);

    fn error_bell(&self);

    //fn event(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> bool;

    fn freeze_child_notify(&self);

    //fn get_accessible(&self) -> /*Ignored*/Option<atk::Object>;

    //#[cfg(gtk_3_16)]
    //fn get_action_group(&self, prefix: &str) -> /*Ignored*/Option<gio::ActionGroup>;

    #[cfg(gtk_3_10)]
    fn get_allocated_baseline(&self) -> i32;

    fn get_allocated_height(&self) -> i32;

    fn get_allocated_width(&self) -> i32;

    fn get_allocation(&self) -> Allocation;

    fn get_ancestor(&self, widget_type: glib::types::Type) -> Option<Widget>;

    fn get_app_paintable(&self) -> bool;

    fn get_can_default(&self) -> bool;

    fn get_can_focus(&self) -> bool;

    fn get_child_requisition(&self) -> Requisition;

    fn get_child_visible(&self) -> bool;

    #[cfg(gtk_3_14)]
    fn get_clip(&self) -> Allocation;

    //fn get_clipboard(&self, selection: /*Ignored*/&gdk::Atom) -> /*Ignored*/Option<Clipboard>;

    fn get_composite_name(&self) -> Option<String>;

    //fn get_device_enabled(&self, device: /*Ignored*/&gdk::Device) -> bool;

    //fn get_device_events(&self, device: /*Ignored*/&gdk::Device) -> /*Ignored*/gdk::EventMask;

    fn get_direction(&self) -> TextDirection;

    //fn get_display(&self) -> /*Ignored*/Option<gdk::Display>;

    fn get_double_buffered(&self) -> bool;

    fn get_events(&self) -> i32;

    //#[cfg(gtk_3_8)]
    //fn get_frame_clock(&self) -> /*Ignored*/Option<gdk::FrameClock>;

    fn get_halign(&self) -> Align;

    fn get_has_tooltip(&self) -> bool;

    fn get_has_window(&self) -> bool;

    fn get_hexpand(&self) -> bool;

    fn get_hexpand_set(&self) -> bool;

    fn get_mapped(&self) -> bool;

    fn get_margin_bottom(&self) -> i32;

    #[cfg(gtk_3_12)]
    fn get_margin_end(&self) -> i32;

    fn get_margin_left(&self) -> i32;

    fn get_margin_right(&self) -> i32;

    #[cfg(gtk_3_12)]
    fn get_margin_start(&self) -> i32;

    fn get_margin_top(&self) -> i32;

    #[cfg(gtk_3_4)]
    fn get_modifier_mask(&self, intent: gdk::ModifierIntent) -> gdk::ModifierType;

    //fn get_modifier_style(&self) -> /*Ignored*/Option<RcStyle>;

    fn get_name(&self) -> Option<String>;

    fn get_no_show_all(&self) -> bool;

    #[cfg(gtk_3_8)]
    fn get_opacity(&self) -> f64;

    //fn get_pango_context(&self) -> /*Ignored*/Option<pango::Context>;

    fn get_parent(&self) -> Option<Widget>;

    fn get_parent_window(&self) -> Option<gdk::Window>;

    //fn get_path(&self) -> /*Ignored*/WidgetPath;

    fn get_pointer(&self) -> (i32, i32);

    fn get_preferred_height(&self) -> (i32, i32);

    #[cfg(gtk_3_10)]
    fn get_preferred_height_and_baseline_for_width(&self, width: i32) -> (i32, i32, i32, i32);

    fn get_preferred_height_for_width(&self, width: i32) -> (i32, i32);

    fn get_preferred_size(&self) -> (Requisition, Requisition);

    fn get_preferred_width(&self) -> (i32, i32);

    fn get_preferred_width_for_height(&self, height: i32) -> (i32, i32);

    fn get_realized(&self) -> bool;

    fn get_receives_default(&self) -> bool;

    fn get_request_mode(&self) -> SizeRequestMode;

    fn get_requisition(&self) -> Requisition;

    fn get_root_window(&self) -> Option<gdk::Window>;

    #[cfg(gtk_3_10)]
    fn get_scale_factor(&self) -> i32;

    fn get_screen(&self) -> Option<gdk::Screen>;

    fn get_sensitive(&self) -> bool;

    //fn get_settings(&self) -> /*Ignored*/Option<Settings>;

    fn get_size_request(&self) -> (i32, i32);

    fn get_state(&self) -> StateType;

    fn get_state_flags(&self) -> StateFlags;

    //fn get_style(&self) -> /*Ignored*/Option<Style>;

    fn get_style_context(&self) -> Option<StyleContext>;

    fn get_support_multidevice(&self) -> bool;

    //fn get_template_child(&self, widget_type: glib::types::Type, name: &str) -> /*Ignored*/Option<gobject::Object>;

    fn get_tooltip_markup(&self) -> Option<String>;

    fn get_tooltip_text(&self) -> Option<String>;

    fn get_tooltip_window(&self) -> Option<Window>;

    fn get_toplevel(&self) -> Option<Widget>;

    fn get_valign(&self) -> Align;

    #[cfg(gtk_3_10)]
    fn get_valign_with_baseline(&self) -> Align;

    fn get_vexpand(&self) -> bool;

    fn get_vexpand_set(&self) -> bool;

    fn get_visible(&self) -> bool;

    //fn get_visual(&self) -> /*Ignored*/Option<gdk::Visual>;

    fn get_window(&self) -> Option<gdk::Window>;

    fn grab_add(&self);

    fn grab_default(&self);

    fn grab_focus(&self);

    fn grab_remove(&self);

    fn has_default(&self) -> bool;

    fn has_focus(&self) -> bool;

    fn has_grab(&self) -> bool;

    fn has_rc_style(&self) -> bool;

    fn has_screen(&self) -> bool;

    fn has_visible_focus(&self) -> bool;

    fn hide(&self);

    fn hide_on_delete(&self) -> bool;

    fn in_destruction(&self) -> bool;

    #[cfg(gtk_3_10)]
    fn init_template(&self);

    //fn input_shape_combine_region(&self, region: /*Ignored*/Option<&mut cairo::Region>);

    //#[cfg(gtk_3_6)]
    //fn insert_action_group<T: IsA</*Ignored*/gio::ActionGroup>>(&self, name: &str, group: Option<&T>);

    fn is_ancestor<T: IsA<Widget>>(&self, ancestor: &T) -> bool;

    fn is_composited(&self) -> bool;

    fn is_drawable(&self) -> bool;

    fn is_focus(&self) -> bool;

    fn is_sensitive(&self) -> bool;

    fn is_toplevel(&self) -> bool;

    #[cfg(gtk_3_8)]
    fn is_visible(&self) -> bool;

    fn keynav_failed(&self, direction: DirectionType) -> bool;

    //fn list_accel_closures(&self) -> /*Ignored*/Vec<gobject::Closure>;

    #[cfg(gtk_3_16)]
    fn list_action_prefixes(&self) -> Vec<String>;

    fn list_mnemonic_labels(&self) -> Vec<Widget>;

    fn map(&self);

    fn mnemonic_activate(&self, group_cycling: bool) -> bool;

    //fn modify_base(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>);

    //fn modify_bg(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>);

    //fn modify_cursor(&self, primary: /*Ignored*/Option<&gdk::Color>, secondary: /*Ignored*/Option<&gdk::Color>);

    //fn modify_fg(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>);

    //fn modify_font(&self, font_desc: /*Ignored*/Option<&mut pango::FontDescription>);

    //fn modify_style(&self, style: /*Ignored*/&RcStyle);

    //fn modify_text(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>);

    //fn override_background_color(&self, state: StateFlags, color: /*Ignored*/Option<&gdk::RGBA>);

    //fn override_color(&self, state: StateFlags, color: /*Ignored*/Option<&gdk::RGBA>);

    //fn override_cursor(&self, cursor: /*Ignored*/Option<&gdk::RGBA>, secondary_cursor: /*Ignored*/Option<&gdk::RGBA>);

    //fn override_font(&self, font_desc: /*Ignored*/Option<&pango::FontDescription>);

    //fn override_symbolic_color(&self, name: &str, color: /*Ignored*/Option<&gdk::RGBA>);

    //fn path(&self, path: /*Unimplemented*/String, path_reversed: /*Unimplemented*/String) -> u32;

    fn queue_compute_expand(&self);

    fn queue_draw(&self);

    fn queue_draw_area(&self, x: i32, y: i32, width: i32, height: i32);

    //fn queue_draw_region(&self, region: /*Ignored*/&cairo::Region);

    fn queue_resize(&self);

    fn queue_resize_no_redraw(&self);

    fn realize(&self);

    //fn region_intersect(&self, region: /*Ignored*/&cairo::Region) -> /*Ignored*/cairo::Region;

    #[cfg(gtk_3_8)]
    fn register_window(&self, window: &gdk::Window);

    fn remove_accelerator(&self, accel_group: &AccelGroup, accel_key: u32, accel_mods: gdk::ModifierType) -> bool;

    fn remove_mnemonic_label<T: IsA<Widget>>(&self, label: &T);

    #[cfg(gtk_3_8)]
    fn remove_tick_callback(&self, id: u32);

    fn render_icon(&self, stock_id: &str, size: i32, detail: Option<&str>) -> Option<gdk_pixbuf::Pixbuf>;

    fn render_icon_pixbuf(&self, stock_id: &str, size: i32) -> Option<gdk_pixbuf::Pixbuf>;

    fn reparent<T: IsA<Widget>>(&self, new_parent: &T);

    fn reset_rc_styles(&self);

    fn reset_style(&self);

    //fn send_expose(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> i32;

    //fn send_focus_change(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> bool;

    fn set_accel_path(&self, accel_path: Option<&str>, accel_group: Option<&AccelGroup>);

    fn set_allocation(&self, allocation: &Allocation);

    fn set_app_paintable(&self, app_paintable: bool);

    fn set_can_default(&self, can_default: bool);

    fn set_can_focus(&self, can_focus: bool);

    fn set_child_visible(&self, is_visible: bool);

    #[cfg(gtk_3_14)]
    fn set_clip(&self, clip: &Allocation);

    fn set_composite_name(&self, name: &str);

    //fn set_device_enabled(&self, device: /*Ignored*/&gdk::Device, enabled: bool);

    //fn set_device_events(&self, device: /*Ignored*/&gdk::Device, events: /*Ignored*/gdk::EventMask);

    fn set_direction(&self, dir: TextDirection);

    fn set_double_buffered(&self, double_buffered: bool);

    fn set_events(&self, events: i32);

    fn set_halign(&self, align: Align);

    fn set_has_tooltip(&self, has_tooltip: bool);

    fn set_has_window(&self, has_window: bool);

    fn set_hexpand(&self, expand: bool);

    fn set_hexpand_set(&self, set: bool);

    fn set_mapped(&self, mapped: bool);

    fn set_margin_bottom(&self, margin: i32);

    #[cfg(gtk_3_12)]
    fn set_margin_end(&self, margin: i32);

    fn set_margin_left(&self, margin: i32);

    fn set_margin_right(&self, margin: i32);

    #[cfg(gtk_3_12)]
    fn set_margin_start(&self, margin: i32);

    fn set_margin_top(&self, margin: i32);

    fn set_name(&self, name: &str);

    fn set_no_show_all(&self, no_show_all: bool);

    #[cfg(gtk_3_8)]
    fn set_opacity(&self, opacity: f64);

    fn set_parent<T: IsA<Widget>>(&self, parent: &T);

    fn set_parent_window(&self, parent_window: &gdk::Window);

    fn set_realized(&self, realized: bool);

    fn set_receives_default(&self, receives_default: bool);

    fn set_redraw_on_allocate(&self, redraw_on_allocate: bool);

    fn set_sensitive(&self, sensitive: bool);

    fn set_size_request(&self, width: i32, height: i32);

    fn set_state(&self, state: StateType);

    fn set_state_flags(&self, flags: StateFlags, clear: bool);

    //fn set_style(&self, style: /*Ignored*/Option<&Style>);

    fn set_support_multidevice(&self, support_multidevice: bool);

    fn set_tooltip_markup(&self, markup: Option<&str>);

    fn set_tooltip_text(&self, text: Option<&str>);

    fn set_tooltip_window<T: IsA<Window>>(&self, custom_window: Option<&T>);

    fn set_valign(&self, align: Align);

    fn set_vexpand(&self, expand: bool);

    fn set_vexpand_set(&self, set: bool);

    fn set_visible(&self, visible: bool);

    //fn set_visual(&self, visual: /*Ignored*/Option<&gdk::Visual>);

    fn set_window(&self, window: &gdk::Window);

    //fn shape_combine_region(&self, region: /*Ignored*/Option<&mut cairo::Region>);

    fn show(&self);

    fn show_all(&self);

    fn show_now(&self);

    fn size_allocate(&self, allocation: &mut Allocation);

    #[cfg(gtk_3_10)]
    fn size_allocate_with_baseline(&self, allocation: &mut Allocation, baseline: i32);

    fn size_request(&self) -> Requisition;

    fn style_attach(&self);

    //fn style_get(&self, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs);

    //fn style_get_property(&self, property_name: &str, value: /*Ignored*/&mut gobject::Value);

    //fn style_get_valist(&self, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported);

    fn thaw_child_notify(&self);

    fn translate_coordinates<T: IsA<Widget>>(&self, dest_widget: &T, src_x: i32, src_y: i32) -> Option<(i32, i32)>;

    fn trigger_tooltip_query(&self);

    fn unmap(&self);

    fn unparent(&self);

    fn unrealize(&self);

    #[cfg(gtk_3_8)]
    fn unregister_window(&self, window: &gdk::Window);

    fn unset_state_flags(&self, flags: StateFlags);
}

impl<O: IsA<Widget>> WidgetExt for O {
    fn activate(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_activate(self.to_glib_none().0))
        }
    }

    fn add_accelerator(&self, accel_signal: &str, accel_group: &AccelGroup, accel_key: u32, accel_mods: gdk::ModifierType, accel_flags: AccelFlags) {
        unsafe {
            ffi::gtk_widget_add_accelerator(self.to_glib_none().0, accel_signal.to_glib_none().0, accel_group.to_glib_none().0, accel_key, accel_mods, accel_flags);
        }
    }

    //fn add_device_events(&self, device: /*Ignored*/&gdk::Device, events: /*Ignored*/gdk::EventMask) {
    //    unsafe { TODO: call ffi::gtk_widget_add_device_events() }
    //}

    fn add_events(&self, events: i32) {
        unsafe {
            ffi::gtk_widget_add_events(self.to_glib_none().0, events);
        }
    }

    fn add_mnemonic_label<T: IsA<Widget>>(&self, label: &T) {
        unsafe {
            ffi::gtk_widget_add_mnemonic_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    //#[cfg(gtk_3_8)]
    //fn add_tick_callback(&self, callback: /*Unknown conversion*//*Unimplemented*/TickCallback, user_data: /*Unimplemented*/Fundamental: Pointer, notify: /*Unknown conversion*//*Unimplemented*/DestroyNotify) -> u32 {
    //    unsafe { TODO: call ffi::gtk_widget_add_tick_callback() }
    //}

    fn can_activate_accel(&self, signal_id: u32) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_can_activate_accel(self.to_glib_none().0, signal_id))
        }
    }

    fn child_focus(&self, direction: DirectionType) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_child_focus(self.to_glib_none().0, direction))
        }
    }

    fn child_notify(&self, child_property: &str) {
        unsafe {
            ffi::gtk_widget_child_notify(self.to_glib_none().0, child_property.to_glib_none().0);
        }
    }

    //fn class_path(&self, path: /*Unimplemented*/String, path_reversed: /*Unimplemented*/String) -> u32 {
    //    unsafe { TODO: call ffi::gtk_widget_class_path() }
    //}

    fn compute_expand(&self, orientation: Orientation) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_compute_expand(self.to_glib_none().0, orientation))
        }
    }

    //fn create_pango_context(&self) -> /*Ignored*/Option<pango::Context> {
    //    unsafe { TODO: call ffi::gtk_widget_create_pango_context() }
    //}

    //fn create_pango_layout(&self, text: Option<&str>) -> /*Ignored*/Option<pango::Layout> {
    //    unsafe { TODO: call ffi::gtk_widget_create_pango_layout() }
    //}

    fn destroy(&self) {
        unsafe {
            ffi::gtk_widget_destroy(self.to_glib_none().0);
        }
    }

    //fn destroyed<T: IsA<Widget>>(&self, widget_pointer: &T) {
    //    unsafe { TODO: call ffi::gtk_widget_destroyed() }
    //}

    //fn device_is_shadowed(&self, device: /*Ignored*/&gdk::Device) -> bool {
    //    unsafe { TODO: call ffi::gtk_widget_device_is_shadowed() }
    //}

    //fn drag_begin(&self, targets: /*Ignored*/&TargetList, actions: /*Ignored*/gdk::DragAction, button: i32, event: /*Unknown conversion*//*Unimplemented*/Event) -> /*Ignored*/Option<gdk::DragContext> {
    //    unsafe { TODO: call ffi::gtk_drag_begin() }
    //}

    //#[cfg(gtk_3_10)]
    //fn drag_begin_with_coordinates(&self, targets: /*Ignored*/&TargetList, actions: /*Ignored*/gdk::DragAction, button: i32, event: /*Unknown conversion*//*Unimplemented*/Event, x: i32, y: i32) -> /*Ignored*/Option<gdk::DragContext> {
    //    unsafe { TODO: call ffi::gtk_drag_begin_with_coordinates() }
    //}

    fn drag_check_threshold(&self, start_x: i32, start_y: i32, current_x: i32, current_y: i32) -> bool {
        unsafe {
            from_glib(ffi::gtk_drag_check_threshold(self.to_glib_none().0, start_x, start_y, current_x, current_y))
        }
    }

    fn drag_dest_add_image_targets(&self) {
        unsafe {
            ffi::gtk_drag_dest_add_image_targets(self.to_glib_none().0);
        }
    }

    fn drag_dest_add_text_targets(&self) {
        unsafe {
            ffi::gtk_drag_dest_add_text_targets(self.to_glib_none().0);
        }
    }

    fn drag_dest_add_uri_targets(&self) {
        unsafe {
            ffi::gtk_drag_dest_add_uri_targets(self.to_glib_none().0);
        }
    }

    //fn drag_dest_find_target(&self, context: /*Ignored*/&gdk::DragContext, target_list: /*Ignored*/Option<&TargetList>) -> /*Ignored*/gdk::Atom {
    //    unsafe { TODO: call ffi::gtk_drag_dest_find_target() }
    //}

    //fn drag_dest_get_target_list(&self) -> /*Ignored*/TargetList {
    //    unsafe { TODO: call ffi::gtk_drag_dest_get_target_list() }
    //}

    fn drag_dest_get_track_motion(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_drag_dest_get_track_motion(self.to_glib_none().0))
        }
    }

    //fn drag_dest_set(&self, flags: DestDefaults, targets: /*Ignored*/&[&TargetEntry], n_targets: i32, actions: /*Ignored*/gdk::DragAction) {
    //    unsafe { TODO: call ffi::gtk_drag_dest_set() }
    //}

    //fn drag_dest_set_proxy(&self, proxy_window: &gdk::Window, protocol: /*Ignored*/gdk::DragProtocol, use_coordinates: bool) {
    //    unsafe { TODO: call ffi::gtk_drag_dest_set_proxy() }
    //}

    //fn drag_dest_set_target_list(&self, target_list: /*Ignored*/Option<&TargetList>) {
    //    unsafe { TODO: call ffi::gtk_drag_dest_set_target_list() }
    //}

    fn drag_dest_set_track_motion(&self, track_motion: bool) {
        unsafe {
            ffi::gtk_drag_dest_set_track_motion(self.to_glib_none().0, track_motion.to_glib());
        }
    }

    fn drag_dest_unset(&self) {
        unsafe {
            ffi::gtk_drag_dest_unset(self.to_glib_none().0);
        }
    }

    //fn drag_get_data(&self, context: /*Ignored*/&gdk::DragContext, target: /*Ignored*/&gdk::Atom, time_: u32) {
    //    unsafe { TODO: call ffi::gtk_drag_get_data() }
    //}

    fn drag_highlight(&self) {
        unsafe {
            ffi::gtk_drag_highlight(self.to_glib_none().0);
        }
    }

    fn drag_source_add_image_targets(&self) {
        unsafe {
            ffi::gtk_drag_source_add_image_targets(self.to_glib_none().0);
        }
    }

    fn drag_source_add_text_targets(&self) {
        unsafe {
            ffi::gtk_drag_source_add_text_targets(self.to_glib_none().0);
        }
    }

    fn drag_source_add_uri_targets(&self) {
        unsafe {
            ffi::gtk_drag_source_add_uri_targets(self.to_glib_none().0);
        }
    }

    //fn drag_source_get_target_list(&self) -> /*Ignored*/TargetList {
    //    unsafe { TODO: call ffi::gtk_drag_source_get_target_list() }
    //}

    //fn drag_source_set(&self, start_button_mask: gdk::ModifierType, targets: /*Ignored*/&[&TargetEntry], n_targets: i32, actions: /*Ignored*/gdk::DragAction) {
    //    unsafe { TODO: call ffi::gtk_drag_source_set() }
    //}

    //fn drag_source_set_icon_gicon<T: IsA</*Ignored*/gio::Icon>>(&self, icon: &T) {
    //    unsafe { TODO: call ffi::gtk_drag_source_set_icon_gicon() }
    //}

    fn drag_source_set_icon_name(&self, icon_name: &str) {
        unsafe {
            ffi::gtk_drag_source_set_icon_name(self.to_glib_none().0, icon_name.to_glib_none().0);
        }
    }

    fn drag_source_set_icon_pixbuf(&self, pixbuf: &gdk_pixbuf::Pixbuf) {
        unsafe {
            ffi::gtk_drag_source_set_icon_pixbuf(self.to_glib_none().0, pixbuf.to_glib_none().0);
        }
    }

    fn drag_source_set_icon_stock(&self, stock_id: &str) {
        unsafe {
            ffi::gtk_drag_source_set_icon_stock(self.to_glib_none().0, stock_id.to_glib_none().0);
        }
    }

    //fn drag_source_set_target_list(&self, target_list: /*Ignored*/Option<&TargetList>) {
    //    unsafe { TODO: call ffi::gtk_drag_source_set_target_list() }
    //}

    fn drag_source_unset(&self) {
        unsafe {
            ffi::gtk_drag_source_unset(self.to_glib_none().0);
        }
    }

    fn drag_unhighlight(&self) {
        unsafe {
            ffi::gtk_drag_unhighlight(self.to_glib_none().0);
        }
    }

    //fn draw(&self, cr: /*Ignored*/&mut cairo::Context) {
    //    unsafe { TODO: call ffi::gtk_widget_draw() }
    //}

    fn ensure_style(&self) {
        unsafe {
            ffi::gtk_widget_ensure_style(self.to_glib_none().0);
        }
    }

    fn error_bell(&self) {
        unsafe {
            ffi::gtk_widget_error_bell(self.to_glib_none().0);
        }
    }

    //fn event(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> bool {
    //    unsafe { TODO: call ffi::gtk_widget_event() }
    //}

    fn freeze_child_notify(&self) {
        unsafe {
            ffi::gtk_widget_freeze_child_notify(self.to_glib_none().0);
        }
    }

    //fn get_accessible(&self) -> /*Ignored*/Option<atk::Object> {
    //    unsafe { TODO: call ffi::gtk_widget_get_accessible() }
    //}

    //#[cfg(gtk_3_16)]
    //fn get_action_group(&self, prefix: &str) -> /*Ignored*/Option<gio::ActionGroup> {
    //    unsafe { TODO: call ffi::gtk_widget_get_action_group() }
    //}

    #[cfg(gtk_3_10)]
    fn get_allocated_baseline(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_allocated_baseline(self.to_glib_none().0)
        }
    }

    fn get_allocated_height(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_allocated_height(self.to_glib_none().0)
        }
    }

    fn get_allocated_width(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_allocated_width(self.to_glib_none().0)
        }
    }

    fn get_allocation(&self) -> Allocation {
        unsafe {
            let mut allocation = Allocation::uninitialized();
            ffi::gtk_widget_get_allocation(self.to_glib_none().0, allocation.to_glib_none_mut().0);
            allocation
        }
    }

    fn get_ancestor(&self, widget_type: glib::types::Type) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_ancestor(self.to_glib_none().0, widget_type.to_glib()))
        }
    }

    fn get_app_paintable(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_app_paintable(self.to_glib_none().0))
        }
    }

    fn get_can_default(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_can_default(self.to_glib_none().0))
        }
    }

    fn get_can_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_can_focus(self.to_glib_none().0))
        }
    }

    fn get_child_requisition(&self) -> Requisition {
        unsafe {
            let mut requisition = Requisition::uninitialized();
            ffi::gtk_widget_get_child_requisition(self.to_glib_none().0, requisition.to_glib_none_mut().0);
            requisition
        }
    }

    fn get_child_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_child_visible(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_14)]
    fn get_clip(&self) -> Allocation {
        unsafe {
            let mut clip = Allocation::uninitialized();
            ffi::gtk_widget_get_clip(self.to_glib_none().0, clip.to_glib_none_mut().0);
            clip
        }
    }

    //fn get_clipboard(&self, selection: /*Ignored*/&gdk::Atom) -> /*Ignored*/Option<Clipboard> {
    //    unsafe { TODO: call ffi::gtk_widget_get_clipboard() }
    //}

    fn get_composite_name(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_widget_get_composite_name(self.to_glib_none().0))
        }
    }

    //fn get_device_enabled(&self, device: /*Ignored*/&gdk::Device) -> bool {
    //    unsafe { TODO: call ffi::gtk_widget_get_device_enabled() }
    //}

    //fn get_device_events(&self, device: /*Ignored*/&gdk::Device) -> /*Ignored*/gdk::EventMask {
    //    unsafe { TODO: call ffi::gtk_widget_get_device_events() }
    //}

    fn get_direction(&self) -> TextDirection {
        unsafe {
            ffi::gtk_widget_get_direction(self.to_glib_none().0)
        }
    }

    //fn get_display(&self) -> /*Ignored*/Option<gdk::Display> {
    //    unsafe { TODO: call ffi::gtk_widget_get_display() }
    //}

    fn get_double_buffered(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_double_buffered(self.to_glib_none().0))
        }
    }

    fn get_events(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_events(self.to_glib_none().0)
        }
    }

    //#[cfg(gtk_3_8)]
    //fn get_frame_clock(&self) -> /*Ignored*/Option<gdk::FrameClock> {
    //    unsafe { TODO: call ffi::gtk_widget_get_frame_clock() }
    //}

    fn get_halign(&self) -> Align {
        unsafe {
            ffi::gtk_widget_get_halign(self.to_glib_none().0)
        }
    }

    fn get_has_tooltip(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_has_tooltip(self.to_glib_none().0))
        }
    }

    fn get_has_window(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_has_window(self.to_glib_none().0))
        }
    }

    fn get_hexpand(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_hexpand(self.to_glib_none().0))
        }
    }

    fn get_hexpand_set(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_hexpand_set(self.to_glib_none().0))
        }
    }

    fn get_mapped(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_mapped(self.to_glib_none().0))
        }
    }

    fn get_margin_bottom(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_bottom(self.to_glib_none().0)
        }
    }

    #[cfg(gtk_3_12)]
    fn get_margin_end(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_end(self.to_glib_none().0)
        }
    }

    fn get_margin_left(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_left(self.to_glib_none().0)
        }
    }

    fn get_margin_right(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_right(self.to_glib_none().0)
        }
    }

    #[cfg(gtk_3_12)]
    fn get_margin_start(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_start(self.to_glib_none().0)
        }
    }

    fn get_margin_top(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_margin_top(self.to_glib_none().0)
        }
    }

    #[cfg(gtk_3_4)]
    fn get_modifier_mask(&self, intent: gdk::ModifierIntent) -> gdk::ModifierType {
        unsafe {
            ffi::gtk_widget_get_modifier_mask(self.to_glib_none().0, intent)
        }
    }

    //fn get_modifier_style(&self) -> /*Ignored*/Option<RcStyle> {
    //    unsafe { TODO: call ffi::gtk_widget_get_modifier_style() }
    //}

    fn get_name(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_name(self.to_glib_none().0))
        }
    }

    fn get_no_show_all(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_no_show_all(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_8)]
    fn get_opacity(&self) -> f64 {
        unsafe {
            ffi::gtk_widget_get_opacity(self.to_glib_none().0)
        }
    }

    //fn get_pango_context(&self) -> /*Ignored*/Option<pango::Context> {
    //    unsafe { TODO: call ffi::gtk_widget_get_pango_context() }
    //}

    fn get_parent(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_parent(self.to_glib_none().0))
        }
    }

    fn get_parent_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_parent_window(self.to_glib_none().0))
        }
    }

    //fn get_path(&self) -> /*Ignored*/WidgetPath {
    //    unsafe { TODO: call ffi::gtk_widget_get_path() }
    //}

    fn get_pointer(&self) -> (i32, i32) {
        unsafe {
            let mut x = mem::uninitialized();
            let mut y = mem::uninitialized();
            ffi::gtk_widget_get_pointer(self.to_glib_none().0, &mut x, &mut y);
            (x, y)
        }
    }

    fn get_preferred_height(&self) -> (i32, i32) {
        unsafe {
            let mut minimum_height = mem::uninitialized();
            let mut natural_height = mem::uninitialized();
            ffi::gtk_widget_get_preferred_height(self.to_glib_none().0, &mut minimum_height, &mut natural_height);
            (minimum_height, natural_height)
        }
    }

    #[cfg(gtk_3_10)]
    fn get_preferred_height_and_baseline_for_width(&self, width: i32) -> (i32, i32, i32, i32) {
        unsafe {
            let mut minimum_height = mem::uninitialized();
            let mut natural_height = mem::uninitialized();
            let mut minimum_baseline = mem::uninitialized();
            let mut natural_baseline = mem::uninitialized();
            ffi::gtk_widget_get_preferred_height_and_baseline_for_width(self.to_glib_none().0, width, &mut minimum_height, &mut natural_height, &mut minimum_baseline, &mut natural_baseline);
            (minimum_height, natural_height, minimum_baseline, natural_baseline)
        }
    }

    fn get_preferred_height_for_width(&self, width: i32) -> (i32, i32) {
        unsafe {
            let mut minimum_height = mem::uninitialized();
            let mut natural_height = mem::uninitialized();
            ffi::gtk_widget_get_preferred_height_for_width(self.to_glib_none().0, width, &mut minimum_height, &mut natural_height);
            (minimum_height, natural_height)
        }
    }

    fn get_preferred_size(&self) -> (Requisition, Requisition) {
        unsafe {
            let mut minimum_size = Requisition::uninitialized();
            let mut natural_size = Requisition::uninitialized();
            ffi::gtk_widget_get_preferred_size(self.to_glib_none().0, minimum_size.to_glib_none_mut().0, natural_size.to_glib_none_mut().0);
            (minimum_size, natural_size)
        }
    }

    fn get_preferred_width(&self) -> (i32, i32) {
        unsafe {
            let mut minimum_width = mem::uninitialized();
            let mut natural_width = mem::uninitialized();
            ffi::gtk_widget_get_preferred_width(self.to_glib_none().0, &mut minimum_width, &mut natural_width);
            (minimum_width, natural_width)
        }
    }

    fn get_preferred_width_for_height(&self, height: i32) -> (i32, i32) {
        unsafe {
            let mut minimum_width = mem::uninitialized();
            let mut natural_width = mem::uninitialized();
            ffi::gtk_widget_get_preferred_width_for_height(self.to_glib_none().0, height, &mut minimum_width, &mut natural_width);
            (minimum_width, natural_width)
        }
    }

    fn get_realized(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_realized(self.to_glib_none().0))
        }
    }

    fn get_receives_default(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_receives_default(self.to_glib_none().0))
        }
    }

    fn get_request_mode(&self) -> SizeRequestMode {
        unsafe {
            ffi::gtk_widget_get_request_mode(self.to_glib_none().0)
        }
    }

    fn get_requisition(&self) -> Requisition {
        unsafe {
            let mut requisition = Requisition::uninitialized();
            ffi::gtk_widget_get_requisition(self.to_glib_none().0, requisition.to_glib_none_mut().0);
            requisition
        }
    }

    fn get_root_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_root_window(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_10)]
    fn get_scale_factor(&self) -> i32 {
        unsafe {
            ffi::gtk_widget_get_scale_factor(self.to_glib_none().0)
        }
    }

    fn get_screen(&self) -> Option<gdk::Screen> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_screen(self.to_glib_none().0))
        }
    }

    fn get_sensitive(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_sensitive(self.to_glib_none().0))
        }
    }

    //fn get_settings(&self) -> /*Ignored*/Option<Settings> {
    //    unsafe { TODO: call ffi::gtk_widget_get_settings() }
    //}

    fn get_size_request(&self) -> (i32, i32) {
        unsafe {
            let mut width = mem::uninitialized();
            let mut height = mem::uninitialized();
            ffi::gtk_widget_get_size_request(self.to_glib_none().0, &mut width, &mut height);
            (width, height)
        }
    }

    fn get_state(&self) -> StateType {
        unsafe {
            ffi::gtk_widget_get_state(self.to_glib_none().0)
        }
    }

    fn get_state_flags(&self) -> StateFlags {
        unsafe {
            ffi::gtk_widget_get_state_flags(self.to_glib_none().0)
        }
    }

    //fn get_style(&self) -> /*Ignored*/Option<Style> {
    //    unsafe { TODO: call ffi::gtk_widget_get_style() }
    //}

    fn get_style_context(&self) -> Option<StyleContext> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_style_context(self.to_glib_none().0))
        }
    }

    fn get_support_multidevice(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_support_multidevice(self.to_glib_none().0))
        }
    }

    //fn get_template_child(&self, widget_type: glib::types::Type, name: &str) -> /*Ignored*/Option<gobject::Object> {
    //    unsafe { TODO: call ffi::gtk_widget_get_template_child() }
    //}

    fn get_tooltip_markup(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_widget_get_tooltip_markup(self.to_glib_none().0))
        }
    }

    fn get_tooltip_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_widget_get_tooltip_text(self.to_glib_none().0))
        }
    }

    fn get_tooltip_window(&self) -> Option<Window> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_tooltip_window(self.to_glib_none().0))
        }
    }

    fn get_toplevel(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_toplevel(self.to_glib_none().0))
        }
    }

    fn get_valign(&self) -> Align {
        unsafe {
            ffi::gtk_widget_get_valign(self.to_glib_none().0)
        }
    }

    #[cfg(gtk_3_10)]
    fn get_valign_with_baseline(&self) -> Align {
        unsafe {
            ffi::gtk_widget_get_valign_with_baseline(self.to_glib_none().0)
        }
    }

    fn get_vexpand(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_vexpand(self.to_glib_none().0))
        }
    }

    fn get_vexpand_set(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_vexpand_set(self.to_glib_none().0))
        }
    }

    fn get_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_get_visible(self.to_glib_none().0))
        }
    }

    //fn get_visual(&self) -> /*Ignored*/Option<gdk::Visual> {
    //    unsafe { TODO: call ffi::gtk_widget_get_visual() }
    //}

    fn get_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_widget_get_window(self.to_glib_none().0))
        }
    }

    fn grab_add(&self) {
        unsafe {
            ffi::gtk_grab_add(self.to_glib_none().0);
        }
    }

    fn grab_default(&self) {
        unsafe {
            ffi::gtk_widget_grab_default(self.to_glib_none().0);
        }
    }

    fn grab_focus(&self) {
        unsafe {
            ffi::gtk_widget_grab_focus(self.to_glib_none().0);
        }
    }

    fn grab_remove(&self) {
        unsafe {
            ffi::gtk_grab_remove(self.to_glib_none().0);
        }
    }

    fn has_default(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_default(self.to_glib_none().0))
        }
    }

    fn has_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_focus(self.to_glib_none().0))
        }
    }

    fn has_grab(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_grab(self.to_glib_none().0))
        }
    }

    fn has_rc_style(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_rc_style(self.to_glib_none().0))
        }
    }

    fn has_screen(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_screen(self.to_glib_none().0))
        }
    }

    fn has_visible_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_has_visible_focus(self.to_glib_none().0))
        }
    }

    fn hide(&self) {
        unsafe {
            ffi::gtk_widget_hide(self.to_glib_none().0);
        }
    }

    fn hide_on_delete(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_hide_on_delete(self.to_glib_none().0))
        }
    }

    fn in_destruction(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_in_destruction(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_10)]
    fn init_template(&self) {
        unsafe {
            ffi::gtk_widget_init_template(self.to_glib_none().0);
        }
    }

    //fn input_shape_combine_region(&self, region: /*Ignored*/Option<&mut cairo::Region>) {
    //    unsafe { TODO: call ffi::gtk_widget_input_shape_combine_region() }
    //}

    //#[cfg(gtk_3_6)]
    //fn insert_action_group<T: IsA</*Ignored*/gio::ActionGroup>>(&self, name: &str, group: Option<&T>) {
    //    unsafe { TODO: call ffi::gtk_widget_insert_action_group() }
    //}

    fn is_ancestor<T: IsA<Widget>>(&self, ancestor: &T) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_ancestor(self.to_glib_none().0, ancestor.to_glib_none().0))
        }
    }

    fn is_composited(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_composited(self.to_glib_none().0))
        }
    }

    fn is_drawable(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_drawable(self.to_glib_none().0))
        }
    }

    fn is_focus(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_focus(self.to_glib_none().0))
        }
    }

    fn is_sensitive(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_sensitive(self.to_glib_none().0))
        }
    }

    fn is_toplevel(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_toplevel(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_8)]
    fn is_visible(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_is_visible(self.to_glib_none().0))
        }
    }

    fn keynav_failed(&self, direction: DirectionType) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_keynav_failed(self.to_glib_none().0, direction))
        }
    }

    //fn list_accel_closures(&self) -> /*Ignored*/Vec<gobject::Closure> {
    //    unsafe { TODO: call ffi::gtk_widget_list_accel_closures() }
    //}

    #[cfg(gtk_3_16)]
    fn list_action_prefixes(&self) -> Vec<String> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gtk_widget_list_action_prefixes(self.to_glib_none().0))
        }
    }

    fn list_mnemonic_labels(&self) -> Vec<Widget> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gtk_widget_list_mnemonic_labels(self.to_glib_none().0))
        }
    }

    fn map(&self) {
        unsafe {
            ffi::gtk_widget_map(self.to_glib_none().0);
        }
    }

    fn mnemonic_activate(&self, group_cycling: bool) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_mnemonic_activate(self.to_glib_none().0, group_cycling.to_glib()))
        }
    }

    //fn modify_base(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_base() }
    //}

    //fn modify_bg(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_bg() }
    //}

    //fn modify_cursor(&self, primary: /*Ignored*/Option<&gdk::Color>, secondary: /*Ignored*/Option<&gdk::Color>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_cursor() }
    //}

    //fn modify_fg(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_fg() }
    //}

    //fn modify_font(&self, font_desc: /*Ignored*/Option<&mut pango::FontDescription>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_font() }
    //}

    //fn modify_style(&self, style: /*Ignored*/&RcStyle) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_style() }
    //}

    //fn modify_text(&self, state: StateType, color: /*Ignored*/Option<&gdk::Color>) {
    //    unsafe { TODO: call ffi::gtk_widget_modify_text() }
    //}

    //fn override_background_color(&self, state: StateFlags, color: /*Ignored*/Option<&gdk::RGBA>) {
    //    unsafe { TODO: call ffi::gtk_widget_override_background_color() }
    //}

    //fn override_color(&self, state: StateFlags, color: /*Ignored*/Option<&gdk::RGBA>) {
    //    unsafe { TODO: call ffi::gtk_widget_override_color() }
    //}

    //fn override_cursor(&self, cursor: /*Ignored*/Option<&gdk::RGBA>, secondary_cursor: /*Ignored*/Option<&gdk::RGBA>) {
    //    unsafe { TODO: call ffi::gtk_widget_override_cursor() }
    //}

    //fn override_font(&self, font_desc: /*Ignored*/Option<&pango::FontDescription>) {
    //    unsafe { TODO: call ffi::gtk_widget_override_font() }
    //}

    //fn override_symbolic_color(&self, name: &str, color: /*Ignored*/Option<&gdk::RGBA>) {
    //    unsafe { TODO: call ffi::gtk_widget_override_symbolic_color() }
    //}

    //fn path(&self, path: /*Unimplemented*/String, path_reversed: /*Unimplemented*/String) -> u32 {
    //    unsafe { TODO: call ffi::gtk_widget_path() }
    //}

    fn queue_compute_expand(&self) {
        unsafe {
            ffi::gtk_widget_queue_compute_expand(self.to_glib_none().0);
        }
    }

    fn queue_draw(&self) {
        unsafe {
            ffi::gtk_widget_queue_draw(self.to_glib_none().0);
        }
    }

    fn queue_draw_area(&self, x: i32, y: i32, width: i32, height: i32) {
        unsafe {
            ffi::gtk_widget_queue_draw_area(self.to_glib_none().0, x, y, width, height);
        }
    }

    //fn queue_draw_region(&self, region: /*Ignored*/&cairo::Region) {
    //    unsafe { TODO: call ffi::gtk_widget_queue_draw_region() }
    //}

    fn queue_resize(&self) {
        unsafe {
            ffi::gtk_widget_queue_resize(self.to_glib_none().0);
        }
    }

    fn queue_resize_no_redraw(&self) {
        unsafe {
            ffi::gtk_widget_queue_resize_no_redraw(self.to_glib_none().0);
        }
    }

    fn realize(&self) {
        unsafe {
            ffi::gtk_widget_realize(self.to_glib_none().0);
        }
    }

    //fn region_intersect(&self, region: /*Ignored*/&cairo::Region) -> /*Ignored*/cairo::Region {
    //    unsafe { TODO: call ffi::gtk_widget_region_intersect() }
    //}

    #[cfg(gtk_3_8)]
    fn register_window(&self, window: &gdk::Window) {
        unsafe {
            ffi::gtk_widget_register_window(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    fn remove_accelerator(&self, accel_group: &AccelGroup, accel_key: u32, accel_mods: gdk::ModifierType) -> bool {
        unsafe {
            from_glib(ffi::gtk_widget_remove_accelerator(self.to_glib_none().0, accel_group.to_glib_none().0, accel_key, accel_mods))
        }
    }

    fn remove_mnemonic_label<T: IsA<Widget>>(&self, label: &T) {
        unsafe {
            ffi::gtk_widget_remove_mnemonic_label(self.to_glib_none().0, label.to_glib_none().0);
        }
    }

    #[cfg(gtk_3_8)]
    fn remove_tick_callback(&self, id: u32) {
        unsafe {
            ffi::gtk_widget_remove_tick_callback(self.to_glib_none().0, id);
        }
    }

    fn render_icon(&self, stock_id: &str, size: i32, detail: Option<&str>) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_full(ffi::gtk_widget_render_icon(self.to_glib_none().0, stock_id.to_glib_none().0, size, detail.to_glib_none().0))
        }
    }

    fn render_icon_pixbuf(&self, stock_id: &str, size: i32) -> Option<gdk_pixbuf::Pixbuf> {
        unsafe {
            from_glib_full(ffi::gtk_widget_render_icon_pixbuf(self.to_glib_none().0, stock_id.to_glib_none().0, size))
        }
    }

    fn reparent<T: IsA<Widget>>(&self, new_parent: &T) {
        unsafe {
            ffi::gtk_widget_reparent(self.to_glib_none().0, new_parent.to_glib_none().0);
        }
    }

    fn reset_rc_styles(&self) {
        unsafe {
            ffi::gtk_widget_reset_rc_styles(self.to_glib_none().0);
        }
    }

    fn reset_style(&self) {
        unsafe {
            ffi::gtk_widget_reset_style(self.to_glib_none().0);
        }
    }

    //fn send_expose(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> i32 {
    //    unsafe { TODO: call ffi::gtk_widget_send_expose() }
    //}

    //fn send_focus_change(&self, event: /*Unknown conversion*//*Unimplemented*/Event) -> bool {
    //    unsafe { TODO: call ffi::gtk_widget_send_focus_change() }
    //}

    fn set_accel_path(&self, accel_path: Option<&str>, accel_group: Option<&AccelGroup>) {
        unsafe {
            ffi::gtk_widget_set_accel_path(self.to_glib_none().0, accel_path.to_glib_none().0, accel_group.to_glib_none().0);
        }
    }

    fn set_allocation(&self, allocation: &Allocation) {
        unsafe {
            ffi::gtk_widget_set_allocation(self.to_glib_none().0, allocation.to_glib_none().0);
        }
    }

    fn set_app_paintable(&self, app_paintable: bool) {
        unsafe {
            ffi::gtk_widget_set_app_paintable(self.to_glib_none().0, app_paintable.to_glib());
        }
    }

    fn set_can_default(&self, can_default: bool) {
        unsafe {
            ffi::gtk_widget_set_can_default(self.to_glib_none().0, can_default.to_glib());
        }
    }

    fn set_can_focus(&self, can_focus: bool) {
        unsafe {
            ffi::gtk_widget_set_can_focus(self.to_glib_none().0, can_focus.to_glib());
        }
    }

    fn set_child_visible(&self, is_visible: bool) {
        unsafe {
            ffi::gtk_widget_set_child_visible(self.to_glib_none().0, is_visible.to_glib());
        }
    }

    #[cfg(gtk_3_14)]
    fn set_clip(&self, clip: &Allocation) {
        unsafe {
            ffi::gtk_widget_set_clip(self.to_glib_none().0, clip.to_glib_none().0);
        }
    }

    fn set_composite_name(&self, name: &str) {
        unsafe {
            ffi::gtk_widget_set_composite_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    //fn set_device_enabled(&self, device: /*Ignored*/&gdk::Device, enabled: bool) {
    //    unsafe { TODO: call ffi::gtk_widget_set_device_enabled() }
    //}

    //fn set_device_events(&self, device: /*Ignored*/&gdk::Device, events: /*Ignored*/gdk::EventMask) {
    //    unsafe { TODO: call ffi::gtk_widget_set_device_events() }
    //}

    fn set_direction(&self, dir: TextDirection) {
        unsafe {
            ffi::gtk_widget_set_direction(self.to_glib_none().0, dir);
        }
    }

    fn set_double_buffered(&self, double_buffered: bool) {
        unsafe {
            ffi::gtk_widget_set_double_buffered(self.to_glib_none().0, double_buffered.to_glib());
        }
    }

    fn set_events(&self, events: i32) {
        unsafe {
            ffi::gtk_widget_set_events(self.to_glib_none().0, events);
        }
    }

    fn set_halign(&self, align: Align) {
        unsafe {
            ffi::gtk_widget_set_halign(self.to_glib_none().0, align);
        }
    }

    fn set_has_tooltip(&self, has_tooltip: bool) {
        unsafe {
            ffi::gtk_widget_set_has_tooltip(self.to_glib_none().0, has_tooltip.to_glib());
        }
    }

    fn set_has_window(&self, has_window: bool) {
        unsafe {
            ffi::gtk_widget_set_has_window(self.to_glib_none().0, has_window.to_glib());
        }
    }

    fn set_hexpand(&self, expand: bool) {
        unsafe {
            ffi::gtk_widget_set_hexpand(self.to_glib_none().0, expand.to_glib());
        }
    }

    fn set_hexpand_set(&self, set: bool) {
        unsafe {
            ffi::gtk_widget_set_hexpand_set(self.to_glib_none().0, set.to_glib());
        }
    }

    fn set_mapped(&self, mapped: bool) {
        unsafe {
            ffi::gtk_widget_set_mapped(self.to_glib_none().0, mapped.to_glib());
        }
    }

    fn set_margin_bottom(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_bottom(self.to_glib_none().0, margin);
        }
    }

    #[cfg(gtk_3_12)]
    fn set_margin_end(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_end(self.to_glib_none().0, margin);
        }
    }

    fn set_margin_left(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_left(self.to_glib_none().0, margin);
        }
    }

    fn set_margin_right(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_right(self.to_glib_none().0, margin);
        }
    }

    #[cfg(gtk_3_12)]
    fn set_margin_start(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_start(self.to_glib_none().0, margin);
        }
    }

    fn set_margin_top(&self, margin: i32) {
        unsafe {
            ffi::gtk_widget_set_margin_top(self.to_glib_none().0, margin);
        }
    }

    fn set_name(&self, name: &str) {
        unsafe {
            ffi::gtk_widget_set_name(self.to_glib_none().0, name.to_glib_none().0);
        }
    }

    fn set_no_show_all(&self, no_show_all: bool) {
        unsafe {
            ffi::gtk_widget_set_no_show_all(self.to_glib_none().0, no_show_all.to_glib());
        }
    }

    #[cfg(gtk_3_8)]
    fn set_opacity(&self, opacity: f64) {
        unsafe {
            ffi::gtk_widget_set_opacity(self.to_glib_none().0, opacity);
        }
    }

    fn set_parent<T: IsA<Widget>>(&self, parent: &T) {
        unsafe {
            ffi::gtk_widget_set_parent(self.to_glib_none().0, parent.to_glib_none().0);
        }
    }

    fn set_parent_window(&self, parent_window: &gdk::Window) {
        unsafe {
            ffi::gtk_widget_set_parent_window(self.to_glib_none().0, parent_window.to_glib_none().0);
        }
    }

    fn set_realized(&self, realized: bool) {
        unsafe {
            ffi::gtk_widget_set_realized(self.to_glib_none().0, realized.to_glib());
        }
    }

    fn set_receives_default(&self, receives_default: bool) {
        unsafe {
            ffi::gtk_widget_set_receives_default(self.to_glib_none().0, receives_default.to_glib());
        }
    }

    fn set_redraw_on_allocate(&self, redraw_on_allocate: bool) {
        unsafe {
            ffi::gtk_widget_set_redraw_on_allocate(self.to_glib_none().0, redraw_on_allocate.to_glib());
        }
    }

    fn set_sensitive(&self, sensitive: bool) {
        unsafe {
            ffi::gtk_widget_set_sensitive(self.to_glib_none().0, sensitive.to_glib());
        }
    }

    fn set_size_request(&self, width: i32, height: i32) {
        unsafe {
            ffi::gtk_widget_set_size_request(self.to_glib_none().0, width, height);
        }
    }

    fn set_state(&self, state: StateType) {
        unsafe {
            ffi::gtk_widget_set_state(self.to_glib_none().0, state);
        }
    }

    fn set_state_flags(&self, flags: StateFlags, clear: bool) {
        unsafe {
            ffi::gtk_widget_set_state_flags(self.to_glib_none().0, flags, clear.to_glib());
        }
    }

    //fn set_style(&self, style: /*Ignored*/Option<&Style>) {
    //    unsafe { TODO: call ffi::gtk_widget_set_style() }
    //}

    fn set_support_multidevice(&self, support_multidevice: bool) {
        unsafe {
            ffi::gtk_widget_set_support_multidevice(self.to_glib_none().0, support_multidevice.to_glib());
        }
    }

    fn set_tooltip_markup(&self, markup: Option<&str>) {
        unsafe {
            ffi::gtk_widget_set_tooltip_markup(self.to_glib_none().0, markup.to_glib_none().0);
        }
    }

    fn set_tooltip_text(&self, text: Option<&str>) {
        unsafe {
            ffi::gtk_widget_set_tooltip_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }

    fn set_tooltip_window<T: IsA<Window>>(&self, custom_window: Option<&T>) {
        unsafe {
            ffi::gtk_widget_set_tooltip_window(self.to_glib_none().0, custom_window.to_glib_none().0);
        }
    }

    fn set_valign(&self, align: Align) {
        unsafe {
            ffi::gtk_widget_set_valign(self.to_glib_none().0, align);
        }
    }

    fn set_vexpand(&self, expand: bool) {
        unsafe {
            ffi::gtk_widget_set_vexpand(self.to_glib_none().0, expand.to_glib());
        }
    }

    fn set_vexpand_set(&self, set: bool) {
        unsafe {
            ffi::gtk_widget_set_vexpand_set(self.to_glib_none().0, set.to_glib());
        }
    }

    fn set_visible(&self, visible: bool) {
        unsafe {
            ffi::gtk_widget_set_visible(self.to_glib_none().0, visible.to_glib());
        }
    }

    //fn set_visual(&self, visual: /*Ignored*/Option<&gdk::Visual>) {
    //    unsafe { TODO: call ffi::gtk_widget_set_visual() }
    //}

    fn set_window(&self, window: &gdk::Window) {
        unsafe {
            ffi::gtk_widget_set_window(self.to_glib_none().0, window.to_glib_full());
        }
    }

    //fn shape_combine_region(&self, region: /*Ignored*/Option<&mut cairo::Region>) {
    //    unsafe { TODO: call ffi::gtk_widget_shape_combine_region() }
    //}

    fn show(&self) {
        unsafe {
            ffi::gtk_widget_show(self.to_glib_none().0);
        }
    }

    fn show_all(&self) {
        unsafe {
            ffi::gtk_widget_show_all(self.to_glib_none().0);
        }
    }

    fn show_now(&self) {
        unsafe {
            ffi::gtk_widget_show_now(self.to_glib_none().0);
        }
    }

    fn size_allocate(&self, allocation: &mut Allocation) {
        unsafe {
            ffi::gtk_widget_size_allocate(self.to_glib_none().0, allocation.to_glib_none_mut().0);
        }
    }

    #[cfg(gtk_3_10)]
    fn size_allocate_with_baseline(&self, allocation: &mut Allocation, baseline: i32) {
        unsafe {
            ffi::gtk_widget_size_allocate_with_baseline(self.to_glib_none().0, allocation.to_glib_none_mut().0, baseline);
        }
    }

    fn size_request(&self) -> Requisition {
        unsafe {
            let mut requisition = Requisition::uninitialized();
            ffi::gtk_widget_size_request(self.to_glib_none().0, requisition.to_glib_none_mut().0);
            requisition
        }
    }

    fn style_attach(&self) {
        unsafe {
            ffi::gtk_widget_style_attach(self.to_glib_none().0);
        }
    }

    //fn style_get(&self, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call ffi::gtk_widget_style_get() }
    //}

    //fn style_get_property(&self, property_name: &str, value: /*Ignored*/&mut gobject::Value) {
    //    unsafe { TODO: call ffi::gtk_widget_style_get_property() }
    //}

    //fn style_get_valist(&self, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported) {
    //    unsafe { TODO: call ffi::gtk_widget_style_get_valist() }
    //}

    fn thaw_child_notify(&self) {
        unsafe {
            ffi::gtk_widget_thaw_child_notify(self.to_glib_none().0);
        }
    }

    fn translate_coordinates<T: IsA<Widget>>(&self, dest_widget: &T, src_x: i32, src_y: i32) -> Option<(i32, i32)> {
        unsafe {
            let mut dest_x = mem::uninitialized();
            let mut dest_y = mem::uninitialized();
            let ret = from_glib(ffi::gtk_widget_translate_coordinates(self.to_glib_none().0, dest_widget.to_glib_none().0, src_x, src_y, &mut dest_x, &mut dest_y));
            if ret { Some((dest_x, dest_y)) } else { None }
        }
    }

    fn trigger_tooltip_query(&self) {
        unsafe {
            ffi::gtk_widget_trigger_tooltip_query(self.to_glib_none().0);
        }
    }

    fn unmap(&self) {
        unsafe {
            ffi::gtk_widget_unmap(self.to_glib_none().0);
        }
    }

    fn unparent(&self) {
        unsafe {
            ffi::gtk_widget_unparent(self.to_glib_none().0);
        }
    }

    fn unrealize(&self) {
        unsafe {
            ffi::gtk_widget_unrealize(self.to_glib_none().0);
        }
    }

    #[cfg(gtk_3_8)]
    fn unregister_window(&self, window: &gdk::Window) {
        unsafe {
            ffi::gtk_widget_unregister_window(self.to_glib_none().0, window.to_glib_none().0);
        }
    }

    fn unset_state_flags(&self, flags: StateFlags) {
        unsafe {
            ffi::gtk_widget_unset_state_flags(self.to_glib_none().0, flags);
        }
    }
}
