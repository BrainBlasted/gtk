// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Bin;
use Buildable;
use Container;
use PositionType;
use Widget;

pub type Popover = Object<ffi::GtkPopover>;

unsafe impl Upcast<Widget> for Popover { }
unsafe impl Upcast<Container> for Popover { }
unsafe impl Upcast<Bin> for Popover { }
unsafe impl Upcast<Buildable> for Popover { }

impl Popover {
    #[cfg(gtk_3_12)]
    pub fn new<T: Upcast<Widget>>(relative_to: Option<&T>) -> Popover {
        unsafe {
            Widget::from_glib_none(ffi::gtk_popover_new(relative_to.map(Upcast::upcast).to_glib_none().0)).downcast_unchecked()
        }
    }

    //#[cfg(gtk_3_12)]
    //pub fn new_from_model<T: Upcast<Widget>, U: Upcast<gio::MenuModel>>(relative_to: Option<&T>, model: &U) -> Popover {
    //    unsafe { TODO: call ffi:gtk_popover_new_from_model() }
    //}

}

impl types::StaticType for Popover {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_popover_get_type()) }
    }
}

pub trait PopoverExt {
    //#[cfg(gtk_3_12)]
    //fn bind_model<T: Upcast<gio::MenuModel>>(&self, model: Option<&T>, action_namespace: Option<&str>);
    #[cfg(gtk_3_12)]
    fn get_modal(&self) -> bool;
    //fn get_pointing_to(&self, rect: /*Unknown kind*/Unknown rust type: "Rectangle") -> bool;
    fn get_position(&self) -> PositionType;
    #[cfg(gtk_3_12)]
    fn get_relative_to(&self) -> Option<Widget>;
    #[cfg(gtk_3_16)]
    fn get_transitions_enabled(&self) -> bool;
    #[cfg(gtk_3_12)]
    fn set_modal(&self, modal: bool);
    //#[cfg(gtk_3_12)]
    //fn set_pointing_to(&self, rect: /*Unknown kind*/Unknown rust type: "Rectangle");
    #[cfg(gtk_3_12)]
    fn set_position(&self, position: PositionType);
    #[cfg(gtk_3_12)]
    fn set_relative_to<T: Upcast<Widget>>(&self, relative_to: Option<&T>);
    #[cfg(gtk_3_16)]
    fn set_transitions_enabled(&self, transitions_enabled: bool);
}

impl<O: Upcast<Popover>> PopoverExt for O {
    //#[cfg(gtk_3_12)]
    //fn bind_model<T: Upcast<gio::MenuModel>>(&self, model: Option<&T>, action_namespace: Option<&str>) {
    //    unsafe { TODO: call ffi:gtk_popover_bind_model() }
    //}

    #[cfg(gtk_3_12)]
    fn get_modal(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_popover_get_modal(self.upcast().to_glib_none().0))
        }
    }

    //fn get_pointing_to(&self, rect: /*Unknown kind*/Unknown rust type: "Rectangle") -> bool {
    //    unsafe { TODO: call ffi:gtk_popover_get_pointing_to() }
    //}

    fn get_position(&self) -> PositionType {
        unsafe {
            ffi::gtk_popover_get_position(self.upcast().to_glib_none().0)
        }
    }

    #[cfg(gtk_3_12)]
    fn get_relative_to(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_popover_get_relative_to(self.upcast().to_glib_none().0))
        }
    }

    #[cfg(gtk_3_16)]
    fn get_transitions_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_popover_get_transitions_enabled(self.upcast().to_glib_none().0))
        }
    }

    #[cfg(gtk_3_12)]
    fn set_modal(&self, modal: bool) {
        unsafe {
            ffi::gtk_popover_set_modal(self.upcast().to_glib_none().0, modal.to_glib());
        }
    }

    //#[cfg(gtk_3_12)]
    //fn set_pointing_to(&self, rect: /*Unknown kind*/Unknown rust type: "Rectangle") {
    //    unsafe { TODO: call ffi:gtk_popover_set_pointing_to() }
    //}

    #[cfg(gtk_3_12)]
    fn set_position(&self, position: PositionType) {
        unsafe {
            ffi::gtk_popover_set_position(self.upcast().to_glib_none().0, position);
        }
    }

    #[cfg(gtk_3_12)]
    fn set_relative_to<T: Upcast<Widget>>(&self, relative_to: Option<&T>) {
        unsafe {
            ffi::gtk_popover_set_relative_to(self.upcast().to_glib_none().0, relative_to.map(Upcast::upcast).to_glib_none().0);
        }
    }

    #[cfg(gtk_3_16)]
    fn set_transitions_enabled(&self, transitions_enabled: bool) {
        unsafe {
            ffi::gtk_popover_set_transitions_enabled(self.upcast().to_glib_none().0, transitions_enabled.to_glib());
        }
    }

}
