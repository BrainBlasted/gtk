// This file was generated by gir (a3f05e3) from gir-files (11e0e6d)
// DO NOT EDIT

use StateType;
use cairo;
use ffi;
use ffi::GtkStyle;
use gdk;
use glib;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi::gpointer;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct Style(Object<ffi::GtkStyle>);

    match fn {
        get_type => || ffi::gtk_style_get_type(),
    }
}

impl Style {
    pub fn new() -> Style {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gtk_style_new())
        }
    }

    pub fn apply_default_background(&self, cr: &cairo::Context, window: &gdk::Window, state_type: StateType, x: i32, y: i32, width: i32, height: i32) {
        unsafe {
            ffi::gtk_style_apply_default_background(self.to_glib_none().0, mut_override(cr.to_glib_none().0), window.to_glib_none().0, state_type.to_glib(), x, y, width, height);
        }
    }

    pub fn attach(&self, window: &gdk::Window) -> Option<Style> {
        unsafe {
            from_glib_none(ffi::gtk_style_attach(self.to_glib_none().0, window.to_glib_none().0))
        }
    }

    pub fn copy(&self) -> Option<Style> {
        unsafe {
            from_glib_full(ffi::gtk_style_copy(self.to_glib_none().0))
        }
    }

    pub fn detach(&self) {
        unsafe {
            ffi::gtk_style_detach(self.to_glib_none().0);
        }
    }

    //pub fn get(&self, widget_type: glib::types::Type, first_property_name: &str, : /*Unknown conversion*//*Unimplemented*/Fundamental: VarArgs) {
    //    unsafe { TODO: call ffi::gtk_style_get() }
    //}

    pub fn get_style_property(&self, widget_type: glib::types::Type, property_name: &str) -> glib::Value {
        unsafe {
            let mut value = glib::Value::uninitialized();
            ffi::gtk_style_get_style_property(self.to_glib_none().0, widget_type.to_glib(), property_name.to_glib_none().0, value.to_glib_none_mut().0);
            value
        }
    }

    //pub fn get_valist(&self, widget_type: glib::types::Type, first_property_name: &str, var_args: /*Unknown conversion*//*Unimplemented*/Unsupported) {
    //    unsafe { TODO: call ffi::gtk_style_get_valist() }
    //}

    pub fn has_context(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_style_has_context(self.to_glib_none().0))
        }
    }

    //pub fn lookup_color(&self, color_name: &str, color: /*Ignored*/gdk::Color) -> bool {
    //    unsafe { TODO: call ffi::gtk_style_lookup_color() }
    //}

    //pub fn lookup_icon_set(&self, stock_id: &str) -> /*Ignored*/Option<IconSet> {
    //    unsafe { TODO: call ffi::gtk_style_lookup_icon_set() }
    //}

    //pub fn render_icon<T: IsA<Widget>>(&self, source: /*Ignored*/&IconSource, direction: TextDirection, state: StateType, size: i32, widget: Option<&T>, detail: Option<&str>) -> Option<gdk_pixbuf::Pixbuf> {
    //    unsafe { TODO: call ffi::gtk_style_render_icon() }
    //}

    pub fn set_background(&self, window: &gdk::Window, state_type: StateType) {
        unsafe {
            ffi::gtk_style_set_background(self.to_glib_none().0, window.to_glib_none().0, state_type.to_glib());
        }
    }

    pub fn connect_realize<F: Fn(&Style) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Style) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "realize",
                transmute(realize_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_unrealize<F: Fn(&Style) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Style) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "unrealize",
                transmute(unrealize_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn realize_trampoline(this: *mut GtkStyle, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Style) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn unrealize_trampoline(this: *mut GtkStyle, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Style) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
