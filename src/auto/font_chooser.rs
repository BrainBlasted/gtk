// This file was generated by gir (b3fbe4b) from gir-files (11e0e6d)
// DO NOT EDIT

use ffi;
use glib::object::Upcast;
use glib::translate::*;

glib_wrapper! {
    pub struct FontChooser(Object<ffi::GtkFontChooser>);

    match fn {
        get_type => || ffi::gtk_font_chooser_get_type(),
    }
}

pub trait FontChooserExt {
    fn get_font(&self) -> Option<String>;
    //fn get_font_desc(&self) -> /*Ignored*/pango::FontDescription;
    //fn get_font_face(&self) -> /*Ignored*/Option<pango::FontFace>;
    //fn get_font_family(&self) -> /*Ignored*/Option<pango::FontFamily>;
    fn get_font_size(&self) -> i32;
    fn get_preview_text(&self) -> Option<String>;
    fn get_show_preview_entry(&self) -> bool;
    //fn set_filter_func(&self, filter: /*Unknown conversion*/Unknown rust type: "FontFilterFunc", user_data: Fundamental: Pointer, destroy: /*Unknown conversion*/Unknown rust type: "DestroyNotify");
    fn set_font(&self, fontname: &str);
    //fn set_font_desc(&self, font_desc: /*Ignored*/&pango::FontDescription);
    fn set_preview_text(&self, text: &str);
    fn set_show_preview_entry(&self, show_preview_entry: bool);
}

impl<O: Upcast<FontChooser>> FontChooserExt for O {
    fn get_font(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_font_chooser_get_font(self.to_glib_none().0))
        }
    }

    //fn get_font_desc(&self) -> /*Ignored*/pango::FontDescription {
    //    unsafe { TODO: call ffi::gtk_font_chooser_get_font_desc() }
    //}

    //fn get_font_face(&self) -> /*Ignored*/Option<pango::FontFace> {
    //    unsafe { TODO: call ffi::gtk_font_chooser_get_font_face() }
    //}

    //fn get_font_family(&self) -> /*Ignored*/Option<pango::FontFamily> {
    //    unsafe { TODO: call ffi::gtk_font_chooser_get_font_family() }
    //}

    fn get_font_size(&self) -> i32 {
        unsafe {
            ffi::gtk_font_chooser_get_font_size(self.to_glib_none().0)
        }
    }

    fn get_preview_text(&self) -> Option<String> {
        unsafe {
            from_glib_full(ffi::gtk_font_chooser_get_preview_text(self.to_glib_none().0))
        }
    }

    fn get_show_preview_entry(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_font_chooser_get_show_preview_entry(self.to_glib_none().0))
        }
    }

    //fn set_filter_func(&self, filter: /*Unknown conversion*/Unknown rust type: "FontFilterFunc", user_data: Fundamental: Pointer, destroy: /*Unknown conversion*/Unknown rust type: "DestroyNotify") {
    //    unsafe { TODO: call ffi::gtk_font_chooser_set_filter_func() }
    //}

    fn set_font(&self, fontname: &str) {
        unsafe {
            ffi::gtk_font_chooser_set_font(self.to_glib_none().0, fontname.to_glib_none().0);
        }
    }

    //fn set_font_desc(&self, font_desc: /*Ignored*/&pango::FontDescription) {
    //    unsafe { TODO: call ffi::gtk_font_chooser_set_font_desc() }
    //}

    fn set_preview_text(&self, text: &str) {
        unsafe {
            ffi::gtk_font_chooser_set_preview_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }

    fn set_show_preview_entry(&self, show_preview_entry: bool) {
        unsafe {
            ffi::gtk_font_chooser_set_show_preview_entry(self.to_glib_none().0, show_preview_entry.to_glib());
        }
    }

}
