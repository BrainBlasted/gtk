// This file was generated by gir (f8c137b) from gir-files (11e0e6d)
// DO NOT EDIT

use Actionable;
use Bin;
use Buildable;
use Button;
use Container;
use Widget;
use ffi;
use glib::translate::*;
use glib::types;
use object::*;

pub type ToggleButton = Object<ffi::GtkToggleButton>;

unsafe impl Upcast<Widget> for ToggleButton { }
unsafe impl Upcast<Container> for ToggleButton { }
unsafe impl Upcast<Bin> for ToggleButton { }
unsafe impl Upcast<Button> for ToggleButton { }
unsafe impl Upcast<Actionable> for ToggleButton { }
unsafe impl Upcast<Buildable> for ToggleButton { }

impl ToggleButton {
    pub fn new() -> ToggleButton {
        unsafe {
            Widget::from_glib_none(ffi::gtk_toggle_button_new()).downcast_unchecked()
        }
    }

    pub fn new_with_label(label: &str) -> ToggleButton {
        unsafe {
            Widget::from_glib_none(ffi::gtk_toggle_button_new_with_label(label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_with_mnemonic(label: &str) -> ToggleButton {
        unsafe {
            Widget::from_glib_none(ffi::gtk_toggle_button_new_with_mnemonic(label.to_glib_none().0)).downcast_unchecked()
        }
    }

}

impl types::StaticType for ToggleButton {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_toggle_button_get_type()) }
    }
}

pub trait ToggleButtonExt {
    fn get_active(&self) -> bool;
    fn get_inconsistent(&self) -> bool;
    fn get_mode(&self) -> bool;
    fn set_active(&self, is_active: bool);
    fn set_inconsistent(&self, setting: bool);
    fn set_mode(&self, draw_indicator: bool);
    fn toggled(&self);
}

impl<O: Upcast<ToggleButton>> ToggleButtonExt for O {
    fn get_active(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_toggle_button_get_active(self.upcast().to_glib_none().0))
        }
    }

    fn get_inconsistent(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_toggle_button_get_inconsistent(self.upcast().to_glib_none().0))
        }
    }

    fn get_mode(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_toggle_button_get_mode(self.upcast().to_glib_none().0))
        }
    }

    fn set_active(&self, is_active: bool) {
        unsafe {
            ffi::gtk_toggle_button_set_active(self.upcast().to_glib_none().0, is_active.to_glib());
        }
    }

    fn set_inconsistent(&self, setting: bool) {
        unsafe {
            ffi::gtk_toggle_button_set_inconsistent(self.upcast().to_glib_none().0, setting.to_glib());
        }
    }

    fn set_mode(&self, draw_indicator: bool) {
        unsafe {
            ffi::gtk_toggle_button_set_mode(self.upcast().to_glib_none().0, draw_indicator.to_glib());
        }
    }

    fn toggled(&self) {
        unsafe {
            ffi::gtk_toggle_button_toggled(self.upcast().to_glib_none().0);
        }
    }

}
