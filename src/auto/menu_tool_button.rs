// This file was generated by gir (f8c137b) from gir-files (11e0e6d)
// DO NOT EDIT

use Actionable;
use Bin;
use Buildable;
use Container;
use ToolButton;
use ToolItem;
use Widget;
use ffi;
use glib::translate::*;
use glib::types;
use object::*;

pub type MenuToolButton = Object<ffi::GtkMenuToolButton>;

unsafe impl Upcast<Widget> for MenuToolButton { }
unsafe impl Upcast<Container> for MenuToolButton { }
unsafe impl Upcast<Bin> for MenuToolButton { }
unsafe impl Upcast<ToolItem> for MenuToolButton { }
unsafe impl Upcast<ToolButton> for MenuToolButton { }
unsafe impl Upcast<Actionable> for MenuToolButton { }
unsafe impl Upcast<Buildable> for MenuToolButton { }

impl MenuToolButton {
    pub fn new<T: Upcast<Widget>>(icon_widget: Option<&T>, label: Option<&str>) -> MenuToolButton {
        unsafe {
            ToolItem::from_glib_none(ffi::gtk_menu_tool_button_new(icon_widget.map(Upcast::upcast).to_glib_none().0, label.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn new_from_stock(stock_id: &str) -> MenuToolButton {
        unsafe {
            ToolItem::from_glib_none(ffi::gtk_menu_tool_button_new_from_stock(stock_id.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn get_menu(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_menu_tool_button_get_menu(self.to_glib_none().0))
        }
    }

    pub fn set_arrow_tooltip_markup(&self, markup: &str) {
        unsafe {
            ffi::gtk_menu_tool_button_set_arrow_tooltip_markup(self.to_glib_none().0, markup.to_glib_none().0);
        }
    }

    pub fn set_arrow_tooltip_text(&self, text: &str) {
        unsafe {
            ffi::gtk_menu_tool_button_set_arrow_tooltip_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }

    pub fn set_menu<T: Upcast<Widget>>(&self, menu: &T) {
        unsafe {
            ffi::gtk_menu_tool_button_set_menu(self.to_glib_none().0, menu.upcast().to_glib_none().0);
        }
    }

}

impl types::StaticType for MenuToolButton {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_menu_tool_button_get_type()) }
    }
}
