// This file was generated by gir (f8c137b) from gir-files (11e0e6d)
// DO NOT EDIT

use Adjustment;
use Bin;
use Buildable;
use Container;
use ShadowType;
use Widget;
use ffi;
use gdk;
use glib::translate::*;
use glib::types;
use object::*;

pub type Viewport = Object<ffi::GtkViewport>;

unsafe impl Upcast<Widget> for Viewport { }
unsafe impl Upcast<Container> for Viewport { }
unsafe impl Upcast<Bin> for Viewport { }
unsafe impl Upcast<Buildable> for Viewport { }

impl Viewport {
    pub fn new(hadjustment: Option<&Adjustment>, vadjustment: Option<&Adjustment>) -> Viewport {
        unsafe {
            Widget::from_glib_none(ffi::gtk_viewport_new(hadjustment.to_glib_none().0, vadjustment.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn get_bin_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_viewport_get_bin_window(self.to_glib_none().0))
        }
    }

    pub fn get_hadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(ffi::gtk_viewport_get_hadjustment(self.to_glib_none().0))
        }
    }

    pub fn get_shadow_type(&self) -> ShadowType {
        unsafe {
            ffi::gtk_viewport_get_shadow_type(self.to_glib_none().0)
        }
    }

    pub fn get_vadjustment(&self) -> Option<Adjustment> {
        unsafe {
            from_glib_none(ffi::gtk_viewport_get_vadjustment(self.to_glib_none().0))
        }
    }

    pub fn get_view_window(&self) -> Option<gdk::Window> {
        unsafe {
            from_glib_none(ffi::gtk_viewport_get_view_window(self.to_glib_none().0))
        }
    }

    pub fn set_hadjustment(&self, adjustment: Option<&Adjustment>) {
        unsafe {
            ffi::gtk_viewport_set_hadjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

    pub fn set_shadow_type(&self, type_: ShadowType) {
        unsafe {
            ffi::gtk_viewport_set_shadow_type(self.to_glib_none().0, type_);
        }
    }

    pub fn set_vadjustment(&self, adjustment: Option<&Adjustment>) {
        unsafe {
            ffi::gtk_viewport_set_vadjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

}

impl types::StaticType for Viewport {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_viewport_get_type()) }
    }
}
