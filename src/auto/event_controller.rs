// This file was generated by gir (9bd51ed) from gir-files (db49619)
// DO NOT EDIT

#[cfg(feature = "v3_14")]
use PropagationPhase;
#[cfg(feature = "v3_14")]
use Widget;
use ffi;
#[cfg(feature = "v3_14")]
use gdk;
use glib;
#[cfg(feature = "v3_14")]
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(feature = "v3_14")]
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
#[cfg(feature = "v3_14")]
use std::boxed::Box as Box_;
use std::mem;
#[cfg(feature = "v3_14")]
use std::mem::transmute;
use std::ptr;

glib_wrapper! {
    pub struct EventController(Object<ffi::GtkEventController>);

    match fn {
        get_type => || ffi::gtk_event_controller_get_type(),
    }
}

pub trait EventControllerExt {
    #[cfg(feature = "v3_14")]
    fn get_propagation_phase(&self) -> PropagationPhase;

    #[cfg(feature = "v3_14")]
    fn get_widget(&self) -> Option<Widget>;

    #[cfg(feature = "v3_14")]
    fn handle_event(&self, event: &gdk::Event) -> bool;

    #[cfg(feature = "v3_14")]
    fn reset(&self);

    #[cfg(feature = "v3_14")]
    fn set_propagation_phase(&self, phase: PropagationPhase);

    #[cfg(feature = "v3_14")]
    fn connect_property_propagation_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> u64;

    #[cfg(feature = "v3_14")]
    fn connect_property_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<EventController> + IsA<glib::object::Object>> EventControllerExt for O {
    #[cfg(feature = "v3_14")]
    fn get_propagation_phase(&self) -> PropagationPhase {
        unsafe {
            from_glib(ffi::gtk_event_controller_get_propagation_phase(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn get_widget(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_event_controller_get_widget(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn handle_event(&self, event: &gdk::Event) -> bool {
        unsafe {
            from_glib(ffi::gtk_event_controller_handle_event(self.to_glib_none().0, event.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_14")]
    fn reset(&self) {
        unsafe {
            ffi::gtk_event_controller_reset(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_14")]
    fn set_propagation_phase(&self, phase: PropagationPhase) {
        unsafe {
            ffi::gtk_event_controller_set_propagation_phase(self.to_glib_none().0, phase.to_glib());
        }
    }

    #[cfg(feature = "v3_14")]
    fn connect_property_propagation_phase_notify<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::propagation-phase",
                transmute(notify_propagation_phase_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }

    #[cfg(feature = "v3_14")]
    fn connect_property_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "notify::widget",
                transmute(notify_widget_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v3_14")]
unsafe extern "C" fn notify_propagation_phase_trampoline<P>(this: *mut ffi::GtkEventController, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<EventController> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&EventController::from_glib_none(this).downcast_unchecked())
}

#[cfg(feature = "v3_14")]
unsafe extern "C" fn notify_widget_trampoline<P>(this: *mut ffi::GtkEventController, _param_spec: glib_ffi::gpointer, f: glib_ffi::gpointer)
where P: IsA<EventController> {
    callback_guard!();
    let f: &&(Fn(&P) + 'static) = transmute(f);
    f(&EventController::from_glib_none(this).downcast_unchecked())
}
