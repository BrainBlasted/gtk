// This file was generated by gir (e0b4c3b) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Bin;
use Buildable;
use Container;
use Widget;

pub type ActionBar = Object<ffi::GtkActionBar>;

unsafe impl Upcast<Widget> for ActionBar { }
unsafe impl Upcast<Container> for ActionBar { }
unsafe impl Upcast<Bin> for ActionBar { }
unsafe impl Upcast<Buildable> for ActionBar { }

impl ActionBar {
    #[cfg(gtk_3_12)]
    pub fn new() -> ActionBar {
        unsafe {
            Widget::from_glib_none(ffi::gtk_action_bar_new()).downcast_unchecked()
        }
    }

    #[cfg(gtk_3_12)]
    pub fn get_center_widget(&self) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_action_bar_get_center_widget(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_12)]
    pub fn pack_end<T: Upcast<Widget>>(&self, child: &T) {
        unsafe {
            ffi::gtk_action_bar_pack_end(self.to_glib_none().0, child.upcast().to_glib_none().0);
        }
    }

    #[cfg(gtk_3_12)]
    pub fn pack_start<T: Upcast<Widget>>(&self, child: &T) {
        unsafe {
            ffi::gtk_action_bar_pack_start(self.to_glib_none().0, child.upcast().to_glib_none().0);
        }
    }

    #[cfg(gtk_3_12)]
    pub fn set_center_widget<T: Upcast<Widget>>(&self, center_widget: Option<&T>) {
        unsafe {
            ffi::gtk_action_bar_set_center_widget(self.to_glib_none().0, center_widget.map(Upcast::upcast).to_glib_none().0);
        }
    }

}

impl types::StaticType for ActionBar {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_action_bar_get_type()) }
    }
}
