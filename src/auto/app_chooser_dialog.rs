// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Bin;
use Buildable;
use Container;
use Dialog;
use DialogFlags;
use Widget;
use Window;

pub type AppChooserDialog = Object<ffi::GtkAppChooserDialog>;

unsafe impl Upcast<Widget> for AppChooserDialog { }
unsafe impl Upcast<Container> for AppChooserDialog { }
unsafe impl Upcast<Bin> for AppChooserDialog { }
unsafe impl Upcast<Window> for AppChooserDialog { }
unsafe impl Upcast<Dialog> for AppChooserDialog { }
unsafe impl Upcast<Buildable> for AppChooserDialog { }

impl AppChooserDialog {
    //pub fn new<T: Upcast<Window>>(parent: Option<&T>, flags: DialogFlags, file: Unknown rust type: "File") -> AppChooserDialog {
    //    unsafe { TODO: call ffi:gtk_app_chooser_dialog_new() }
    //}

    pub fn new_for_content_type<T: Upcast<Window>>(parent: Option<&T>, flags: DialogFlags, content_type: &str) -> AppChooserDialog {
        unsafe {
            Widget::from_glib_none(ffi::gtk_app_chooser_dialog_new_for_content_type(parent.map(Upcast::upcast).to_glib_none().0, flags, content_type.to_glib_none().0)).downcast_unchecked()
        }
    }

    pub fn get_heading(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_app_chooser_dialog_get_heading(self.to_glib_none().0))
        }
    }

    pub fn get_widget(&self) -> Widget {
        unsafe {
            from_glib_none(ffi::gtk_app_chooser_dialog_get_widget(self.to_glib_none().0))
        }
    }

    pub fn set_heading(&self, heading: &str) {
        unsafe {
            ffi::gtk_app_chooser_dialog_set_heading(self.to_glib_none().0, heading.to_glib_none().0);
        }
    }

}

impl types::StaticType for AppChooserDialog {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_app_chooser_dialog_get_type()) }
    }
}
