// This file was generated by gir (f8c137b) from gir-files (11e0e6d)
// DO NOT EDIT

use Buildable;
use Orientable;
use Widget;
use ffi;
use glib::translate::*;
use glib::types;
use object::*;

pub type ProgressBar = Object<ffi::GtkProgressBar>;

unsafe impl Upcast<Widget> for ProgressBar { }
unsafe impl Upcast<Buildable> for ProgressBar { }
unsafe impl Upcast<Orientable> for ProgressBar { }

impl ProgressBar {
    pub fn new() -> ProgressBar {
        unsafe {
            Widget::from_glib_none(ffi::gtk_progress_bar_new()).downcast_unchecked()
        }
    }

    //pub fn get_ellipsize(&self) -> pango::EllipsizeMode {
    //    unsafe { TODO: call ffi::gtk_progress_bar_get_ellipsize() }
    //}

    pub fn get_fraction(&self) -> f64 {
        unsafe {
            ffi::gtk_progress_bar_get_fraction(self.to_glib_none().0)
        }
    }

    pub fn get_inverted(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_progress_bar_get_inverted(self.to_glib_none().0))
        }
    }

    pub fn get_pulse_step(&self) -> f64 {
        unsafe {
            ffi::gtk_progress_bar_get_pulse_step(self.to_glib_none().0)
        }
    }

    pub fn get_show_text(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_progress_bar_get_show_text(self.to_glib_none().0))
        }
    }

    pub fn get_text(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gtk_progress_bar_get_text(self.to_glib_none().0))
        }
    }

    pub fn pulse(&self) {
        unsafe {
            ffi::gtk_progress_bar_pulse(self.to_glib_none().0);
        }
    }

    //pub fn set_ellipsize(&self, mode: pango::EllipsizeMode) {
    //    unsafe { TODO: call ffi::gtk_progress_bar_set_ellipsize() }
    //}

    pub fn set_fraction(&self, fraction: f64) {
        unsafe {
            ffi::gtk_progress_bar_set_fraction(self.to_glib_none().0, fraction);
        }
    }

    pub fn set_inverted(&self, inverted: bool) {
        unsafe {
            ffi::gtk_progress_bar_set_inverted(self.to_glib_none().0, inverted.to_glib());
        }
    }

    pub fn set_pulse_step(&self, fraction: f64) {
        unsafe {
            ffi::gtk_progress_bar_set_pulse_step(self.to_glib_none().0, fraction);
        }
    }

    pub fn set_show_text(&self, show_text: bool) {
        unsafe {
            ffi::gtk_progress_bar_set_show_text(self.to_glib_none().0, show_text.to_glib());
        }
    }

    pub fn set_text(&self, text: Option<&str>) {
        unsafe {
            ffi::gtk_progress_bar_set_text(self.to_glib_none().0, text.to_glib_none().0);
        }
    }

}

impl types::StaticType for ProgressBar {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_progress_bar_get_type()) }
    }
}
