// This file was generated by gir (adc662d) from gir-files (11e0e6d)
// DO NOT EDIT

#[cfg(feature = "v3_12")]
use Adjustment;
use Container;
use FlowBoxChild;
use MovementStep;
use Orientable;
#[cfg(feature = "v3_12")]
use SelectionMode;
use Widget;
use ffi;
use ffi::GtkFlowBox;
use ffi::GtkFlowBoxChild;
use ffi::GtkMovementStep;
use glib::object::Downcast;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi::gpointer;
use libc::c_int;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct FlowBox(Object<ffi::GtkFlowBox>): Container, Widget, Orientable;

    match fn {
        get_type => || ffi::gtk_flow_box_get_type(),
    }
}

impl FlowBox {
    #[cfg(feature = "v3_12")]
    pub fn new() -> FlowBox {
        assert_initialized_main_thread!();
        unsafe {
            Widget::from_glib_none(ffi::gtk_flow_box_new()).downcast_unchecked()
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_activate_on_single_click(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_flow_box_get_activate_on_single_click(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_child_at_index(&self, idx: i32) -> Option<FlowBoxChild> {
        unsafe {
            from_glib_none(ffi::gtk_flow_box_get_child_at_index(self.to_glib_none().0, idx))
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_column_spacing(&self) -> u32 {
        unsafe {
            ffi::gtk_flow_box_get_column_spacing(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_homogeneous(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_flow_box_get_homogeneous(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_max_children_per_line(&self) -> u32 {
        unsafe {
            ffi::gtk_flow_box_get_max_children_per_line(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_min_children_per_line(&self) -> u32 {
        unsafe {
            ffi::gtk_flow_box_get_min_children_per_line(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_row_spacing(&self) -> u32 {
        unsafe {
            ffi::gtk_flow_box_get_row_spacing(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_selected_children(&self) -> Vec<FlowBoxChild> {
        unsafe {
            FromGlibPtrContainer::from_glib_container(ffi::gtk_flow_box_get_selected_children(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn get_selection_mode(&self) -> SelectionMode {
        unsafe {
            from_glib(ffi::gtk_flow_box_get_selection_mode(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn insert<T: IsA<Widget>>(&self, widget: &T, position: i32) {
        unsafe {
            ffi::gtk_flow_box_insert(self.to_glib_none().0, widget.to_glib_none().0, position);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn invalidate_filter(&self) {
        unsafe {
            ffi::gtk_flow_box_invalidate_filter(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn invalidate_sort(&self) {
        unsafe {
            ffi::gtk_flow_box_invalidate_sort(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn select_all(&self) {
        unsafe {
            ffi::gtk_flow_box_select_all(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn select_child(&self, child: &FlowBoxChild) {
        unsafe {
            ffi::gtk_flow_box_select_child(self.to_glib_none().0, child.to_glib_none().0);
        }
    }

    //#[cfg(feature = "v3_12")]
    //pub fn selected_foreach(&self, func: /*Unknown conversion*//*Unimplemented*/FlowBoxForeachFunc, data: /*Unimplemented*/Fundamental: Pointer) {
    //    unsafe { TODO: call ffi::gtk_flow_box_selected_foreach() }
    //}

    #[cfg(feature = "v3_12")]
    pub fn set_activate_on_single_click(&self, single: bool) {
        unsafe {
            ffi::gtk_flow_box_set_activate_on_single_click(self.to_glib_none().0, single.to_glib());
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_column_spacing(&self, spacing: u32) {
        unsafe {
            ffi::gtk_flow_box_set_column_spacing(self.to_glib_none().0, spacing);
        }
    }

    //#[cfg(feature = "v3_12")]
    //pub fn set_filter_func(&self, filter_func: /*Unknown conversion*//*Unimplemented*/FlowBoxFilterFunc, user_data: /*Unimplemented*/Fundamental: Pointer, destroy: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::gtk_flow_box_set_filter_func() }
    //}

    #[cfg(feature = "v3_12")]
    pub fn set_hadjustment(&self, adjustment: &Adjustment) {
        unsafe {
            ffi::gtk_flow_box_set_hadjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_homogeneous(&self, homogeneous: bool) {
        unsafe {
            ffi::gtk_flow_box_set_homogeneous(self.to_glib_none().0, homogeneous.to_glib());
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_max_children_per_line(&self, n_children: u32) {
        unsafe {
            ffi::gtk_flow_box_set_max_children_per_line(self.to_glib_none().0, n_children);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_min_children_per_line(&self, n_children: u32) {
        unsafe {
            ffi::gtk_flow_box_set_min_children_per_line(self.to_glib_none().0, n_children);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_row_spacing(&self, spacing: u32) {
        unsafe {
            ffi::gtk_flow_box_set_row_spacing(self.to_glib_none().0, spacing);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn set_selection_mode(&self, mode: SelectionMode) {
        unsafe {
            ffi::gtk_flow_box_set_selection_mode(self.to_glib_none().0, mode.to_glib());
        }
    }

    //#[cfg(feature = "v3_12")]
    //pub fn set_sort_func(&self, sort_func: /*Unknown conversion*//*Unimplemented*/FlowBoxSortFunc, user_data: /*Unimplemented*/Fundamental: Pointer, destroy: /*Unknown conversion*//*Unimplemented*/DestroyNotify) {
    //    unsafe { TODO: call ffi::gtk_flow_box_set_sort_func() }
    //}

    #[cfg(feature = "v3_12")]
    pub fn set_vadjustment(&self, adjustment: &Adjustment) {
        unsafe {
            ffi::gtk_flow_box_set_vadjustment(self.to_glib_none().0, adjustment.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn unselect_all(&self) {
        unsafe {
            ffi::gtk_flow_box_unselect_all(self.to_glib_none().0);
        }
    }

    #[cfg(feature = "v3_12")]
    pub fn unselect_child(&self, child: &FlowBoxChild) {
        unsafe {
            ffi::gtk_flow_box_unselect_child(self.to_glib_none().0, child.to_glib_none().0);
        }
    }

    pub fn connect_activate_cursor_child<F: Fn(&FlowBox) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "activate-cursor-child",
                transmute(activate_cursor_child_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_child_activated<F: Fn(&FlowBox, &FlowBoxChild) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox, &FlowBoxChild) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "child-activated",
                transmute(child_activated_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_move_cursor<F: Fn(&FlowBox, MovementStep, i32) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox, MovementStep, i32) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "move-cursor",
                transmute(move_cursor_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_select_all<F: Fn(&FlowBox) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "select-all",
                transmute(select_all_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_selected_children_changed<F: Fn(&FlowBox) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "selected-children-changed",
                transmute(selected_children_changed_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_toggle_cursor_child<F: Fn(&FlowBox) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "toggle-cursor-child",
                transmute(toggle_cursor_child_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_unselect_all<F: Fn(&FlowBox) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&FlowBox) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "unselect-all",
                transmute(unselect_all_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn activate_cursor_child_trampoline(this: *mut GtkFlowBox, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn child_activated_trampoline(this: *mut GtkFlowBox, child: *mut GtkFlowBoxChild, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox, &FlowBoxChild) + 'static> = transmute(f);
    f(&from_glib_none(this), &from_glib_none(child))
}

unsafe extern "C" fn move_cursor_trampoline(this: *mut GtkFlowBox, step: GtkMovementStep, count: c_int, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox, MovementStep, i32) + 'static> = transmute(f);
    f(&from_glib_none(this), from_glib(step), count)
}

unsafe extern "C" fn select_all_trampoline(this: *mut GtkFlowBox, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn selected_children_changed_trampoline(this: *mut GtkFlowBox, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn toggle_cursor_child_trampoline(this: *mut GtkFlowBox, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn unselect_all_trampoline(this: *mut GtkFlowBox, f: gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&FlowBox) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
