// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use Bin;
use Buildable;
use Container;
#[cfg(gtk_3_10)]
use Entry;
use Widget;

pub type SearchBar = Object<ffi::GtkSearchBar>;

unsafe impl Upcast<Widget> for SearchBar { }
unsafe impl Upcast<Container> for SearchBar { }
unsafe impl Upcast<Bin> for SearchBar { }
unsafe impl Upcast<Buildable> for SearchBar { }

impl SearchBar {
    #[cfg(gtk_3_10)]
    pub fn new() -> SearchBar {
        unsafe {
            Widget::from_glib_none(ffi::gtk_search_bar_new()).downcast_unchecked()
        }
    }

    #[cfg(gtk_3_10)]
    pub fn connect_entry<T: Upcast<Entry>>(&self, entry: &T) {
        unsafe {
            ffi::gtk_search_bar_connect_entry(self.to_glib_none().0, entry.upcast().to_glib_none().0);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn get_search_mode(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_search_bar_get_search_mode(self.to_glib_none().0))
        }
    }

    #[cfg(gtk_3_10)]
    pub fn get_show_close_button(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_search_bar_get_show_close_button(self.to_glib_none().0))
        }
    }

    //#[cfg(gtk_3_10)]
    //pub fn handle_event(&self, event: /*Unknown kind*/Unknown rust type: "Event") -> bool {
    //    unsafe { TODO: call ffi:gtk_search_bar_handle_event() }
    //}

    #[cfg(gtk_3_10)]
    pub fn set_search_mode(&self, search_mode: bool) {
        unsafe {
            ffi::gtk_search_bar_set_search_mode(self.to_glib_none().0, search_mode.to_glib());
        }
    }

    #[cfg(gtk_3_10)]
    pub fn set_show_close_button(&self, visible: bool) {
        unsafe {
            ffi::gtk_search_bar_set_show_close_button(self.to_glib_none().0, visible.to_glib());
        }
    }

}

impl types::StaticType for SearchBar {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_search_bar_get_type()) }
    }
}
