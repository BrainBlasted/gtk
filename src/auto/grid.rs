// This file was generated by gir (e0b4c3b) from gir-files (11e0e6d)
// DO NOT EDIT

use glib::translate::*;
use glib::types;
use ffi;

use object::*;
use BaselinePosition;
use Buildable;
use Container;
use Orientable;
use PositionType;
use Widget;

pub type Grid = Object<ffi::GtkGrid>;

unsafe impl Upcast<Widget> for Grid { }
unsafe impl Upcast<Container> for Grid { }
unsafe impl Upcast<Buildable> for Grid { }
unsafe impl Upcast<Orientable> for Grid { }

impl Grid {
    pub fn new() -> Grid {
        unsafe {
            Widget::from_glib_none(ffi::gtk_grid_new()).downcast_unchecked()
        }
    }

    pub fn attach<T: Upcast<Widget>>(&self, child: &T, left: i32, top: i32, width: i32, height: i32) {
        unsafe {
            ffi::gtk_grid_attach(self.to_glib_none().0, child.upcast().to_glib_none().0, left, top, width, height);
        }
    }

    pub fn attach_next_to<T: Upcast<Widget>, U: Upcast<Widget>>(&self, child: &T, sibling: Option<&U>, side: PositionType, width: i32, height: i32) {
        unsafe {
            ffi::gtk_grid_attach_next_to(self.to_glib_none().0, child.upcast().to_glib_none().0, sibling.map(Upcast::upcast).to_glib_none().0, side, width, height);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn get_baseline_row(&self) -> i32 {
        unsafe {
            ffi::gtk_grid_get_baseline_row(self.to_glib_none().0)
        }
    }

    pub fn get_child_at(&self, left: i32, top: i32) -> Option<Widget> {
        unsafe {
            from_glib_none(ffi::gtk_grid_get_child_at(self.to_glib_none().0, left, top))
        }
    }

    pub fn get_column_homogeneous(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_grid_get_column_homogeneous(self.to_glib_none().0))
        }
    }

    pub fn get_column_spacing(&self) -> u32 {
        unsafe {
            ffi::gtk_grid_get_column_spacing(self.to_glib_none().0)
        }
    }

    #[cfg(gtk_3_10)]
    pub fn get_row_baseline_position(&self, row: i32) -> BaselinePosition {
        unsafe {
            ffi::gtk_grid_get_row_baseline_position(self.to_glib_none().0, row)
        }
    }

    pub fn get_row_homogeneous(&self) -> bool {
        unsafe {
            from_glib(ffi::gtk_grid_get_row_homogeneous(self.to_glib_none().0))
        }
    }

    pub fn get_row_spacing(&self) -> u32 {
        unsafe {
            ffi::gtk_grid_get_row_spacing(self.to_glib_none().0)
        }
    }

    pub fn insert_column(&self, position: i32) {
        unsafe {
            ffi::gtk_grid_insert_column(self.to_glib_none().0, position);
        }
    }

    pub fn insert_next_to<T: Upcast<Widget>>(&self, sibling: &T, side: PositionType) {
        unsafe {
            ffi::gtk_grid_insert_next_to(self.to_glib_none().0, sibling.upcast().to_glib_none().0, side);
        }
    }

    pub fn insert_row(&self, position: i32) {
        unsafe {
            ffi::gtk_grid_insert_row(self.to_glib_none().0, position);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn remove_column(&self, position: i32) {
        unsafe {
            ffi::gtk_grid_remove_column(self.to_glib_none().0, position);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn remove_row(&self, position: i32) {
        unsafe {
            ffi::gtk_grid_remove_row(self.to_glib_none().0, position);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn set_baseline_row(&self, row: i32) {
        unsafe {
            ffi::gtk_grid_set_baseline_row(self.to_glib_none().0, row);
        }
    }

    pub fn set_column_homogeneous(&self, homogeneous: bool) {
        unsafe {
            ffi::gtk_grid_set_column_homogeneous(self.to_glib_none().0, homogeneous.to_glib());
        }
    }

    pub fn set_column_spacing(&self, spacing: u32) {
        unsafe {
            ffi::gtk_grid_set_column_spacing(self.to_glib_none().0, spacing);
        }
    }

    #[cfg(gtk_3_10)]
    pub fn set_row_baseline_position(&self, row: i32, pos: BaselinePosition) {
        unsafe {
            ffi::gtk_grid_set_row_baseline_position(self.to_glib_none().0, row, pos);
        }
    }

    pub fn set_row_homogeneous(&self, homogeneous: bool) {
        unsafe {
            ffi::gtk_grid_set_row_homogeneous(self.to_glib_none().0, homogeneous.to_glib());
        }
    }

    pub fn set_row_spacing(&self, spacing: u32) {
        unsafe {
            ffi::gtk_grid_set_row_spacing(self.to_glib_none().0, spacing);
        }
    }

}

impl types::StaticType for Grid {
    #[inline]
    fn static_type() -> types::Type {
        unsafe { from_glib(ffi::gtk_grid_get_type()) }
    }
}
